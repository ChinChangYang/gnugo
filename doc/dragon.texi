@menu
* Worms::                             Worms
* Amalgamation::                      How two Worms are amalgamated.
* Connection::                        Connections.
* Half Eyes::                         Half Eyes and False Eyes.
* Dragons::                           Union of WORMS.
* Dragons in Color::                  Colored display of DRAGONS.
* Worm and Dragon Functions::         Worm and Dragon Functions.
@end menu

Before considering its move, GNU Go collects some data in several
arrays. Two of these arrays, called @code{worm} and @code{dragon}, are
discussed in this document. Others are discussed in @xref{Eyes}.

This information is intended to help evaluate the connectedness, eye
shape, escape potential and life status of each group.

Later routines called by @code{genmove()} will then have access to this
information. This document attempts to explain the philosophy and
algorithms of this preliminary analysis, which is carried out by the
two routines @code{make_worm()} and @code{make_dragon()} in 
@file{dragon.c}.

@cindex dragon
@cindex worm
@cindex string
A @dfn{worm} is a maximal set of stones on the board which are connected
along the horizontal and vertical lines, and are of the same color.
We often say @dfn{string} instead of worm.

A @dfn{dragon} is a union of strings of the same color which will be
treated as a unit. The dragons are generated anew at each move. If two strings
are in the dragon, it is the computer's working hypothesis that they will live
or die together and are effectively connected.

The purpose of the dragon code is to allow the computer to formulate
meaningful statements about life and death.  To give one example,
consider the following situation:
@example

      OOOOO
     OOXXXOO
     OX...XO
     OXXXXXO
      OOOOO

@end example

The X's here should be considered a single group with one three-space
eye, but they consist of two separate strings.  Thus we must
amalgamate these two strings into a single dragon. Then the assertion
makes sense, that playing at the center will kill or save the dragon,
and is a vital point for both players. It would be difficult to
formulate this statement if the X's are not perceived as a unit.

The present implementation of the dragon code involves simplifying
assumptions which can be refined in later implementations.

@node Worms
@section Worms
@cindex worm

The array @code{struct worm_data worm[MAX_BOARD]} collects information about
the worms. We will give definitions of the various fields. Each field has
constant value at each vertex of the worm. We will define each field.

@example

struct worm_data @{
  int color;
  int size;
  float effective_size;
  int origin;
  int liberties;
  int liberties2;
  int liberties3;
  int liberties4;
  int lunch;
  int cutstone;
  int cutstone2;
  int genus;
  int inessential;
  int invincible;
  int unconditional_status;
  int attack_points[MAX_TACTICAL_POINTS];
  int attack_codes[MAX_TACTICAL_POINTS];
  int defense_points[MAX_TACTICAL_POINTS];
  int defend_codes[MAX_TACTICAL_POINTS];
  int attack_threat_points[MAX_TACTICAL_POINTS];
  int attack_threat_codes[MAX_TACTICAL_POINTS]; 
  int defense_threat_points[MAX_TACTICAL_POINTS];
  int defense_threat_codes[MAX_TACTICAL_POINTS];
@};
@end example

@itemize @bullet
@item @code{color}
@quotation
@cindex border color
If the worm is @code{BLACK} or @code{WHITE}, that is its color.
Cavities (empty worms) have an additional attribute which we call
@dfn{bordercolor}. This will be one of @code{BLACK_BORDER},
@code{WHITE_BORDER} or @code{GRAY_BORDER}. Specifically, if all the worms
adjacent to a given empty worm have the same color (black or white) then we
define that to be the bordercolor. Otherwise the bordercolor is gray.

Rather than define a new field, we keep this data in the
field color. Thus for every worm, the color field will
have one of the following values: @code{BLACK}, @code{WHITE},
@code{GRAY_BORDER}, @code{BLACK_BORDER} or @code{WHITE_BORDER}. 
The last three categories are empty worms classified by bordercolor.
@end quotation
@item @code{size}
@quotation
This field contains the cardinality of the worm.
@end quotation
@item @code{effective_size}
@quotation
@cindex effective size (worm)
This is the number of stones in a worm plus the number
of empty intersections that are at least as close to this worm as to any
other worm. Intersections that are shared are counted with equal
fractional values for each worm. This measures the direct territorial
value of capturing a worm. @dfn{effective_size} is a floating point number.
Only intersections at a distance of 4 or less are counted.
@end quotation
@item @code{origin}
@quotation
@cindex origin (worm)
Each worm has a distinguished member, called its @dfn{origin}.
The purpose of this field is to make it easy to determine when two vertices
lie in the same worm: we compare their origin. Also if we wish to perform some
test once for each worm, we simply perform it at the origin and ignore the
other vertices. The origin is characterized by the test:
@example
worm[pos].origin == pos.
@end example
@end quotation
@item @code{liberties}
@item @code{liberties2}
@item @code{liberties3}
@item @code{liberties4}
@quotation
@cindex liberties (worm)
@cindex liberties, higher order (worm)
For a nonempty worm the field liberties is the number of liberties of the
string. This is supplemented by @code{LIBERTIES2}, @code{LIBERTIES3} and
@code{LIBERTIES4}, which are the number of second order, third order, and
fourth order liberties, respectively.
The definition of liberties of order >1 is adapted to the
problem of detecting the shape of the surrounding
cavity. In particular we want to be able to see if a group
is loosely surrounded. @dfn{a liberty of order n} is an empty
vertex which may be connected to the string by placing n
stones of the same color on the board, but no fewer. The
path of connection may pass through an intervening group
of the same color. The stones placed at distance >1 may
not touch a group of the opposite color. Connections through
ko are not permitted. Thus in the following configuration:
@example

          .XX...    We label the     .XX.4.
          XO....    liberties of     XO1234
          XO....    order < 5 of     XO1234
          ......    the O group:     .12.4.
          .X.X..                     .X.X..

@end example

The convention that liberties of order >1 may not touch a
group of the opposite color means that knight's moves and
one space jumps are perceived as impenetrable barriers.
This is useful in determining when the string is becoming
surrounded.

The path may also not pass through a liberty at distance
1 if that liberty is flanked by two stones of the opposing color. This
reflects the fact that the O stone is blocked from expansion to the
left by the two X stones in the following situation:
@example

          X.
          .O
          X.

@end example
@cindex distance from liberty to dragon
We say that n is the @dfn{distance} of the liberty of order n from the dragon.
@end quotation
@item @code{lunch}
@quotation
@cindex lunch (worm)
If nonzero, @code{lunch} points to a boundary worm which can be easily
captured.  (It does not matter whether or not the string can be
defended.)
@end quotation
@end itemize

We have two distinct notions of cutting stone, which we keep track
of in the separate fields @code{worm.cutstone} and @code{worm.cutstone2}.
We use currently use both concepts in parallel.

@itemize
@item @code{cutstone} 
@quotation
@cindex cutting stone
This field is equal to 2 for cutting stones, 1 for potential cutting
stones. Otherwise it is zero.  Definitions for this field: a @dfn{cutting
stone} is one adjacent to two enemy strings, which do not have a liberty in
common. The most common type of cutting string is in this situation:

@example

          XO
          OX

@end example
@cindex cutting stone, potential
@cindex potential cutting stone

A @dfn{potential cutting stone} is adjacent to two enemy strings which do
share a liberty. For example, X in:

@example

          XO
          O.

@end example

For cutting strings we set @code{worm[].cutstone=2}. For
potential cutting strings we set @code{worm[].cutstone=1}.
@end quotation
@item @code{cutstone2} 
@quotation
Cutting points are identified by the patterns in the connections
database. Proper cuts are handled by the fact that attacking and
defending moves also count as moves cutting or connecting the
surrounding dragons.  The @code{cutstone2} field is set during 
@code{find_cuts()}, called from @code{make_domains()}.
@end quotation
@findex find_cuts
@findex make_domains
@item @code{genus} 
@quotation
@cindex genus (worm)
There are two separate notions of @dfn{genus} for worms and
dragons. The dragon notion is more important, so
@code{dragon[pos].genus} is a far more useful field than
@code{worm[pos].genus}. Both fields are intended as approximations
to the number of eyes. The @dfn{genus} of a string is the number
of connected components of its complement, minus one. It is
an approximation to the number of eyes of the string.
@end quotation
@item @code{inessential} 
@quotation
@cindex inessential string
An @dfn{inessential} string is one which meets a
criterion designed to guarantee that it has no life
potential unless a particular surrounding string of the
opposite color can be killed. More precisely an
@dfn{inessential string} is a string S of genus zero,
not adjacent to any opponent string which can be easily
captured, and which has no edge liberties or second
order liberties, and which satisfies the following
further property: If the string is removed from the
board, then the remaining cavity only borders worms of the
opposite color.

@end quotation
@findex unconditional_life
@item @code{invincible} 
@quotation
@cindex invincible worm
An @dfn{invincible} worm is one which GNU Go thinks
cannot be captured. Invincible worms are computed by the
function @code{unconditional_life()} which tries to
find those worms of the given color that can never be captured,
even if the opponent is allowed an arbitrary number of consecutive
moves.
@end quotation
@item unconditional_status
@quotation
Unconditional status is also set by the function
@code{unconditional_life}. This is set ALIVE for stones which are
invincible. Stones which can not be turned invincible even if the
defender is allowed an arbitrary number of consecutive moves are given
an unconditional status of DEAD. Empty points where the opponent cannot
form an invincible worm are called unconditional territory. The
unconditional status is set to @code{WHITE_BORDER} or @code{BLACK_BORDER}
depending on who owns the territory. Finally, if a stone can be captured but
is adjacent to unconditional territory of its own color, it is also given the
unconditional status @code{ALIVE}. In all other cases the unconditional status is
@code{UNKNOWN}.

To make sense of these definitions it is important to notice that any
stone which is alive in the ordinary sense (even if only in seki) can be
transformed into an invincible group by some number of consecutive
moves. Well, this is not entirely true because there is a rare class of
seki groups not satisfying this condition. Exactly which these are is
left as an exercise for the reader. Currently @code{unconditional_life},
which strictly follows the definitions above, calls such seki groups
unconditionally dead, which of course is a misfeature. It is possible to
avoid this problem by making the algorithm slightly more complex, but
this is left for a later revision.
@end quotation
@item @code{int attack_points[MAX_TACTICAL_POINTS]}
@item @code{attack_codes[MAX_TACTICAL_POINTS]}
@item @code{int defense_points[MAX_TACTICAL_POINTS];}
@item @code{int defend_codes[MAX_TACTICAL_POINTS];}
@quotation
If the tactical reading code (@pxref{Tactical Reading}) finds that the
worm can be attacked, @code{attack_points[0]} is a point of attack, and
@code{attack_codes[0]} is the attack code, @code{WIN}, @code{KO_A} or 
@code{KO_B}. If multiple attacks are known, @code{attack_points[k]} and
@code{attack_codes[k]} are used. Similarly with the defense
codes and defense points.
@end quotation
@item @code{int attack_threat_points[MAX_TACTICAL_POINTS];}
@item @code{int attack_threat_codes[MAX_TACTICAL_POINTS];}
@item @code{int defense_threat_points[MAX_TACTICAL_POINTS];}
@item @code{int defense_threat_codes[MAX_TACTICAL_POINTS];}
@quotation
These are points that threaten to attack or defend a worm.
@end quotation
@end itemize

The function @code{makeworms()} will generate data for all worms.

@node  Amalgamation
@section Amalgamation
@cindex amalgamation of worms into dragons

A dragon, we have said, is a group of stones which are treated as a
unit. It is a working hypothesis that these stones will live or die
together. Thus the program will not expect to disconnect an opponent's
strings if they have been amalgamated into a single dragon.

The function @code{make_dragons()} will amalgamate worms into dragons by
maintaining separate arrays @code{worm[]} and @code{dragon[]} containing
similar data. Each dragon is a union of worms. Just as the data maintained in
@code{worm[]} is constant on each worm, the data in
@code{dragon[]} is constant on each dragon.

Amalgamation of worms in GNU Go 3.0 proceeds as follows.
First we amalgamate all boundary components of an eyeshape. Thus in
the following example:

@example

.OOOO.       The four X strings are amalgamated into a 
OOXXO.       single dragon because they are the boundary
OX..XO       components of a blackbordered cave. The
OX..XO       cave could contain an inessential string
OOXXO.       with no effect on this amalgamation.
XXX...       

@end example
@findex dragon_eye

The code for this type of amalgamation is in the routine
@code{dragon_eye()}, discussed further in EYES.

Next, we amalgamate strings which seem uncuttable. We amalgamate dragons
which either share two or more common liberties, or share one liberty
into the which the opponent cannot play without being
captured. (ignores ko rule).

@example

   X.    X.X     XXXX.XXX         X.O
   .X    X.X     X......X         X.X
                 XXXXXX.X         OXX

@end example

A database of connection patterns may be found in @file{patterns/conn.db}.

@node  Connection
@section Connection
@cindex connections

The fields @code{black_eye.cut} and @code{white_eye.cut} are set where the
opponent can cut, and this is done by the B (break) class patterns in
@file{conn.db}.  There are two important uses for this field, which can be
accessed by the autohelper functions @code{xcut()} and @code{ocut()}. The
first use is to stop amalgamation in positions like

@example

..X..
OO*OO
X.O.X
..O..

@end example

@noindent
where X can play at * to cut off either branch. What happens
here is that first connection pattern CB1 finds the double cut
and marks * as a cutting point. Later the C (connection) class
patterns in conn.db are searched to find secure connections
over which to amalgamate dragons.  Normally a diagonal
connection would be deemed secure and amalgamated by connection
pattern CC101, but there is a constraint requiring that neither of
the empty intersections is a cutting point.
@findex amalgamate_most_valuable_helper

A weakness with this scheme is that X can only cut one connection, not
both, so we should be allowed to amalgamate over one of the connections.
This is performed by connection pattern CC401, which with the help of
@code{amalgamate_most_valuable_helper()} decides which connection to
prefer. 

The other use is to simplify making alternative connection patterns to
the solid connection. Positions where the diag_miai helper thinks a
connection is necessary are marked as cutting points by connection
pattern 12. Thus we can write a connection pattern like @code{CC6}:

@example

?xxx?     straight extension to connect
XOO*?
O...?

:8,C,NULL

?xxx?
XOOb?
Oa..?

;xcut(a) && odefend_against(b,a)

@end example

@noindent
where we verify that a move at @code{*} would stop the enemy from safely
playing at the cutting point, thus defending against the cut.

@node  Half Eyes
@section Half Eyes and False Eyes
@cindex half eye
@cindex false eye

A @dfn{half eye} is a place where, if the defender plays first, an eye
will materialize, but where if the attacker plays first, no eye will
materialize. A @dfn{false eye} is a vertex which is surrounded by a
dragon yet is not an eye. Here is a half eye:

@example
@group

XXXXX
OO..X
O.O.X
OOXXX

@end group
@end example

Here is a false eye:

@example
@group

XXXXX
XOO.X
O.O.X
OOXXX

@end group
@end example

The "topological" algorithm for determining half and false eyes
is described elsewhere (@pxref{Eye Topology}).

The half eye data is collected in the dragon array. Before this is done,
however, an auxiliary array called half_eye_data is filled with
information. The field @code{type} is 0, or else @code{HALF_EYE} or 
@code{FALSE_EYE} depending on which type is found; the fields
@code{attack_point[]} point to up to 4 points to attack
the half eye, and similarly @code{defense_point[]} gives points
to defend the half eye.

@example
@group

struct half_eye_data half_eye[MAX_BOARD];

struct half_eye_data @{
  float value;          /* Topological eye value */
  int type;             /* HALF_EYE or FALSE_EYE */
  int num_attacks;      /* Number of attacking points */
  int attack_point[4];  /* The moves to attack a topological halfeye */
  int num_defends;      /* Number of defending points */
  int defense_point[4]; /* The moves to defend a topological halfeye */
@};

@end group
@end example

The array @code{struct half_eye_data half_eye[MAX_BOARD]} 
contains information about half and false eyes.  If the type is
@code{HALF_EYE} then up to four moves are recorded which can
either attack or defend the eye. In rare cases the attack points
could be different from the defense points.

@node  Dragons
@section Dragons
@cindex dragons

The array @code{struct dragon_data dragon[MAX_BOARD]}
collects information about the dragons. We will give definitions of the
various fields. Each field has constant value at each vertex of the
dragon.

@example

struct dragon_data @{
  int color;
  int id;
  int origin;
  int size;
  float effective_size;
  int crude_status;
  int owl_threat_status;
  int owl_status;
  int owl_attack_point;
  int owl_attack_code;
  int owl_attack_certain;
  int owl_second_attack_point;
  int owl_defense_point;
  int owl_defense_code;
  int owl_defense_certain;
  int owl_second_defense_point;
  int status;
@};

extern struct dragon_data dragon[BOARDMAX];

@end example

Other fields attached to the dragon are contained in the @code{dragon_data2}
struct array. 

@example

struct dragon_data2 @{
  int origin;
  int adjacent[MAX_NEIGHBOR_DRAGONS];
  int neighbors;
  int hostile_neighbors;
  int moyo;
  int safety;
  int escape_route;
  int genus;
  int heyes;
  int heye;
  int lunch;
  int semeai;
  int semeai_margin_of_safety;
@};

extern struct dragon_data2 *dragon2;

@end example

The difference between the two arrays is that the @code{dragon} array 
is indexed by the board, and there is a copy of the dragon data 
at every stone in the dragon, while there is only one copy of
the dragon2 data. The dragons are numbered, and the @code{id} field
of the dragon is a key into the dragon2 array. Two macros DRAGON
and DRAGON2 are provided for gaining access to the two arrays.

@example
#define DRAGON2(pos) dragon2[dragon[pos].id]
#define DRAGON(d) dragon[dragon2[d].origin]
@end example

Thus if you know the position @code{pos} of a stone in the dragon
you can access the dragon array directly, for example accessing the
origin with @code{dragon[pos].origin}. However if you need a field
from the dragon2 array, you can access it using the DRAGON2 macro,
for example you can access its neighor dragons by

@example
for (k = 0; k < DRAGON2(pos).neighbors; k++) @{
  int d = DRAGON2(pos).adjacent[k];
  int apos = dragon2[d].origin;
  do_something(apos);
@}
@end example

Similarly if you know the dragon number (which is @code{dragon[pos].id})
then you can access the @code{dragon2} array directly, or you can
access the @code{dragon} array using the DRAGON macro.

Here are the definitions of each field in the @code{dragon} arrray.

@itemize @bullet 
@item @code{color} 
@quotation
@cindex color (dragon)
For strings, this is @code{BLACK} or @code{WHITE}. 
For caves, it is @code{BLACK_BORDER}, @code{WHITE_BORDER} or 
@code{GRAY_BORDER}. The meaning of these concepts is the same as for worms.
@end quotation
@item @code{id}
@quotation
The dragon number. This is a key into the @code{dragon2} array.
@end quotation
@item @code{origin}
@quotation
@cindex origin (dragon)
The origin of the dragon is a unique particular vertex
of the dragon, useful for determining when two vertices belong
to the same dragon. Before amalgamation the worm origins are
copied to the dragon origins. Amalgamation of two dragons
amounts to changing the origin of one.
@end quotation        
@item @code{size} 
@quotation
@cindex size (dragon)
This is the cardinality of the dragon.
@end quotation
@item @code{effective_size}
@quotation
@cindex effective size (dragon)
The sum of the effective sizes of the constituent worms.
Remembering that vertices equidistant between two or more worms are
counted fractionally in @code{worm.effective_size}, this equals the
cardinality of the dragon plus the number of empty vertices which are
nearer this dragon than any other.
@end quotation
@item @code{genus} 
@quotation
@cindex genus (dragon)
The @dfn{genus} of a nonempty dragon consists of the number
of distinct adjacent caves whose bordercolor is the color of
the dragon, minus the number of false eyes found. The genus
is a computable approximation to the number of eyes a dragon
has.
@end quotation
@item @code{escape_route}
@quotation
@cindex escape_route (dragon)
This is a measure of the escape potential of the dragon. If
@code{dragon.escape_route} is large, GNU Go believes that the
dragon can escape, so finding two eyes locally becomes less
urgent. Further documentation may be found else where
(@pxref{Escape}).
@end quotation
@item @code{crude_status}
@cindex crude_status (dragon)
@findex compute_dragon_status
@quotation
An attempt is made to classify the dragons as @code{ALIVE},
@code{DEAD}, @code{CRITICAL} or @code{UNKNOWN}. The @code{CRITICAL}
classification means that the fate of the dragon depends on who moves first in
the area. The exact definition is in the function 
@code{compute_dragon_status()}. If the dragon is found to be surrounded, 
the crude_status is @code{DEAD} if it has less than 1.5 eyes or if the reading
code determines that it can be killed, @code{ALIVE} if it has 2 or more
eyes, and @code{CRITICAL} if it has 1.5 eyes. A lunch generally counts
as a half eye in these calculations. If it has less than 2 eyes but
seems possibly able to escape, the crude_status may be @code{UNKNOWN}.
@end quotation
@item @code{owl_status}
@quotation
@cindex status, owl (dragon)
@cindex owl_status
This is a classification similar to @code{dragon.crude_status}, but
based on the life and death reading in @file{owl.c}.
The owl code (@pxref{The Owl Code}) is only run on dragons with 
dragon.escape_route>5 and dragon2.moyo>10. If
these conditions are not met, the owl status is @code{UNCHECKED}.
If @code{owl_attack()} determines that the dragon cannot be
attacked, it is classified as @code{ALIVE}. Otherwise,
@code{owl_defend()} is run, and if it can be defended it
is classified as @code{CRITICAL}, and if not, as @code{DEAD}.
@end quotation
@item @code{owl_attack_code}
@quotation
If the owl code finds that the dragon can be attacked, this is the
attack code. It may be @code{WIN}, @code{KO_A}, @code{KO_B}, or (if the
dragon cannot be attacked) 0.
@end quotation
@item @code{owl_attack_point}
@quotation
If the owl code finds that the dragon can be attacked, this is the point
of attack.
@end quotation
@item @code{owl_attack_certain}
@quotation
The function @code{owl_attack}, which is used to set @code{owl_attack_code} 
and @code{owl_attack_point}, is given an upper bound of 
@code{owl_node_limit} in the number of nodes it is allowed to
generate. If this is exceeded the result is considered uncertain and
this flag is set.
@end quotation
@item @code{owl_second_attack_point}
@quotation
Under certain circumstances the owl function @code{owl_threaten_attack}
is asked if the dragon can be killed with two moves in a row. If two
such killing moves are found, they are cached in @code{owl_attacki_point}
@code{(owl_second_attack_point}.
@end quotation
@item @code{owl_defense_code}
@quotation
If the owl code finds that the dragon can be defended, this is the
defense code (@code{WIN}, @code{KO_A}, @code{KO_B}); otherwise it is 0.
@end quotation
@item @code{owl_defense_point}
@quotation
If the owl code finds that the dragon can be defended, this is the move.
@end quotation
@item @code{owl_defense_certain}
@item @code{owl_second_defense_point}
Similar to @code{owl_attack_certain} and
@code{owl_second_attack_point}.
@item @code{status}
@quotation
@cindex status (dragon)
This is the status used by the pattern matcher. If @code{owl_status}
is available (not @code{UNCHECKED}) this is used. Otherwise, we
use the @code{status} field, except that we upgrade @code{DEAD} to
@code{UNKNOWN}.
@end quotation
@end itemize

Here are definitions of each field in the @code{dragon2} array.

@itemize @bullet
@item @code{origin}
@quotation
Duplicates the origin field from the dragon array.
@end quotation
@item @code{adjacent[MAX_NEIGHBOR_DRAGONS]}
@quotation
An array of adjacent dragons.
@end quotation
@item @code{neighbors}
@quotation
The number of adjacent dragons.
@end quotation
@item @code{hostile_neighbors}
@quotation
The number of adjacent dragons of the opposite color.
@end quotation
@item @code{moyo}
@quotation
@findex compute_surrounding_moyo_sizes
Size of the surrounding influence moyo. Computed by
@code{compute_surrounding_moyo_sizes()}, calling the influence code.
@end quotation
@item @code{safety}
@quotation
This is a finer measure of dragon safety than @code{status}.
In addition to the values @code{ALIVE}, @code{DEAD} and @code{CRITICAL} 
it can take the values @code{INESSENTIAL}, @code{TACTICALLY_DEAD}, 
@code{WEAK}, @code{WEAKLY_ALIVE}, @code{ALIVE_IN_SEKI}, @code{STRONGLY_ALIVE}
and @code{INVINCIBLE}.
@end quotation
@item @code{escape_route}
@quotation
A measure of the escape potential of the dragon. Further documentation
may be found elsewhere (@pxref{Escape}).
@end quotation
@item @code{genus}
@quotation
The "genus" of a nonempty dragon consists of the number of
distinct adjacent caves whose bordercolor is the color of the
dragon, minus the number of false eyes found. The genus is a
computable approximation to the number of eyes a dragon has.
@end quotation
@item @code{heyes}
@quotation
This is the number of half eyes the dragon has. A "half eye"
is a pattern where an eye may or may not materialize,
depending on who moves first.
@end quotation
@item @code{heye}
@quotation
If any half eyes are found, this field points to a move
which will create an eye.
@end quotation
@item @code{lunch}
@quotation
If nonzero, this field points to the location of a boundary worm
which can be easily capture. In contrast with the worm version of
this parameter we exclude strings which cannot be saved.
@end quotation
@item @code{semeai}
@quotation
True if the dragon is part of a semeai.
@end quotation
@item @code{semeai_margin_of_safety}
@quotation
Small if the semeai is close. Currently not reliable.
@end quotation
@end itemize

@node Dragons in Color
@section Colored Dragon Display
@cindex colored display

You can get a colored ASCII display of the board in which each dragon
is assigned a different letter; and the different values of
@code{dragon.status} values (@code{ALIVE}, @code{DEAD}, @code{UNKNOWN},
@code{CRITICAL}) have different colors. This is very handy for debugging.
A second diagram shows the values of @code{owl.status}. If this
is @code{UNCHECKED} the dragon is displayed in White.

Save a game in sgf format using CGoban, or using the @option{-o} option with
GNU Go itself.

Open an @command{xterm} or @command{rxvt} window. You may also use the Linux
console.  Using the console, you may need to use ``SHIFT-PAGE UP'' to see the
first diagram. Xterm will only work if it is compiled with color support---if
you do not see the colors try @command{rxvt}. Make the background color black
and the foreground color white.

Execute:

@command{gnugo -l [filename] -L [movenum] -T} to get the colored display.

The color scheme: Green = @code{ALIVE}; Yellow = @code{UNKNOWN}; 
Cyan = @code{DEAD} and Red = @code{CRITICAL}. Worms which have been
amalgamated into the same dragon are labelled with the same letter.

Other useful colored displays may be obtained by using instead:

@itemize @bullet
@item the option -E to display eye spaces (@pxref{Eyes}).
@item the option -m 1 to display territory (@pxref{Moyo}).
@end itemize

The colored displays are documented elsewhere (@pxref{Colored Display}).

@node Worm and Dragon Functions
@section Worm and Dragon Functions

Here are the public functions in @file{engine/worm.c}:

@itemize @bullet
@item @code{void make_worms(int save_verbose)}
@findex make_worms
@quotation
This function finds all worms and assembles some data about them.
Each worm is marked with an origin.  This is an arbitrarily chosen
element of the worm, in practice the algorithm puts the origin at
the first element when they are given the lexicographical order,
though its location is irrelevant for applications. To see if two
stones lie in the same worm, compare their origins.
@end quotation
@item @code{int is_same_worm(int w1, int w2) }
@findex is_same_worm
@quotation
Test whether two worms are the same. Used by autohelpers.
Before this function can be called, build_worms must have been run.
@end quotation 
@item @code{int is_worm_origin(int w, int pos)}
@findex is_worm_origin
@quotation
Test whether the origin of the worm at @code{w} is @code{pos}.
@end quotation
@item @code{void change_defense(int str, int move, int dcode)}
@findex change_defense
@quotation
@code{change_defense(str, move, dcode)} is used to add and remove defense
points. It can also be used to change the defense code. The meaning
of the call is that the string @code{str} can be defended by @code{move} with
defense code @code{dcode}. If @code{dcode} is zero, the move is removed from
the list of defense moves if it was previously listed.
@end quotation
@item @code{void change_attack(int str, int move, int acode)}
@findex change_attack
@quotation
@code{change_attack(str, move, acode)} is used to add and remove attack
points. It can also be used to change the attack code. The meaning
of the call is that the string @code{str} can be attacked by @code{move} with
attack code @code{acode}. If @code{acode} is zero, the move is removed from
the list of attack moves if it was previously listed.
@end quotation
@item @code{void change_defense_threat(int str, int move, int dcode)}
@findex change_defense_threat
@quotation
Used to add and remove defense threat points. It can also be used to
change the defense threat code. The meaning of the call is that the
string @code{str} can threaten to be defended by @code{move} with defense threat
code @code{dcode}. If @code{dcode} is zero, the move is removed from the list
of defense threat moves if it was previously listed.
@end quotation  
@item @code{void change_attack_threat(int str, int move, int acode)}
@findex change_attack_threat
@quotation
Used to add and remove attack threat points. It can also be used to
change the attack threat code. The meaning of the call is that the
string @code{str} can threaten to be attacked by @code{move} with attack threat
code @code{acode}. If @code{acode} is zero, the move is removed from the list
of attack threat moves if it was previously listed.
@end quotation
@item @code{int attack_move_known(int move, int str)}
@findex attack_move_known
@quotation
Check whether @code{move} is listed as an attack point for @code{str} and
return the attack code. If @code{move} is not listed, return 0.
@end quotation
@item @code{int defense_move_known(int move, int str)}
@findex defense_move_known
@quotation
Check whether @code{move} is listed as a defense point for @code{str} and
return the defense code. If @code{move} is not listed, return 0.
@end quotation
@item @code{int attack_threat_move_known(int move, int str)}
@findex attack_threat_move_known
@quotation
Check whether @code{move} is listed as an attack threat point for @code{str}
and return the attack threat code. If @code{move} is not listed, return 0.
@end quotation
@item @code{int defense_threat_move_known(int move, int str)}
@findex defense_threat_move_known
@quotation
Check whether @code{move} is listed as a defense threat point for @code{str}
and return the defense threat code. If @code{move} is not listed, return 0.
@end quotation
@item @code{void propagate_worm(int pos)}
@findex propagate_worm
@quotation
propagate_worm() takes the worm data at one stone and copies it to 
the remaining members of the worm.
@end quotation
@end itemize

Here are the public functions in @file{engine/dragon.c}:

@itemize @bullet
@item @code{void make_dragons(int color, int stop_before_owl, int save_verbose)}
@findex make_dragons
@quotation
This basic function finds all dragons and collects some basic
information about them in the dragon array. @code{color} is the player
in turn to move. This does in no way affect the information collected
about the dragons, but it does affect what information is passed on to
the move generation code. If @code{color == EMPTY} no information at all
is passed on to the move generation.
@end quotation
@item @code{void show_dragons(void)}
@findex show_dragons
@quotation
print status info on all dragons. (Can be invoked from gdb).
@end quotation
@item @code{int is_same_dragon(int d1, int d2)}
@findex is_same_dragon
@quotation
Test whether two dragons are the same. Used by autohelpers and elsewhere.
@end quotation
@item @code{int are_neighbor_dragons(int d1, int d2)}
@findex are_neighbor_dragons
@quotation
Test whether two dragons are neighbors.
@end quotation
@item @code{void ascii_report_dragon(char *string)}
@item @code{void report_dragon(int m, int n)}
@findex ascii_report_dragon
@findex report_dragon
@quotation
For use in gdb, print details of the dragon.
Add this to your @file{.gdbinit} file:
@example

define dragon
set ascii_report_dragon("$arg0")
end

@end example

Now 'dragon S8' will report the details of the S8 dragon.
@end quotation
@end itemize

