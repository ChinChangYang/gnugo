# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is GNU GO, a Go program. Contact gnugo@gnu.org, or see   #
# http://www.gnu.org/software/gnugo/ for more information.      #
#                                                               #
# Copyright 2000, 2001 by the Free Software Foundation.         #
#                                                               #
# This program is free software; you can redistribute it and/or #
# modify it under the terms of the GNU General Public License   #
# as published by the Free Software Foundation - version 2.     #
#                                                               #
# This program is distributed in the hope that it will be       #
# useful, but WITHOUT ANY WARRANTY; without even the implied    #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR       #
# PURPOSE.  See the GNU General Public License in file COPYING  #
# for more details.                                             #
#                                                               #
# You should have received a copy of the GNU General Public     #
# License along with this program; if not, write to the Free    #
# Software Foundation, Inc., 59 Temple Place - Suite 330,       #
# Boston, MA 02111, USA                                         #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#  The Owl defensive pattern database.
#
#  Further documentation may be found in the Texinfo documentation
#
#  First there is a pattern title of the form: Pattern [string]. The
#  string is used for identifying the pattern while tuning or debugging.
#
#  Then a block of the following characters representing the pattern
#  itself.
#  
#  ?     : don't care
#  .     : empty
#  X     : your piece,
#  O     : my piece,
#  x     : your piece or empty
#  o     : my piece or empty
#  *     : my next move
#  -, |  : edge of board
#  +     : corner of board
#
#  If a pattern must not match at the edge of the board,
#  an extra row of ?'s in the pattern may be added. (This
#  will not add to the time taken to check the pattern.)
#
#################
#
#  In the second field (classification) the following pattern attributes
#  are possible. Friendly stones are 'O', opponent stones are 'X'.
# 
# s  :  "Sacrifice" pattern. Omit the usual check that an O stone here
#       cannot be capture.
# 
# n  :  In addition to usual check that an O stone here cannot be
#       captured, check also that an X move cannot be captured.
#
# B  :  This move is not connected to the goal dragon and should
#       therefore not be included in the goal.
#
# b  :  This move is maybe not connected to the goal dragon and should
#       therefore be included only after closer examination.
#
#################
#
# The patterns in this database are sorted into the following
# categories:
# 
# Dxx   Expanding moves on the fourth line
# D1xx  Expanding moves on the third line
# D2xx  Expanding moves on the second line
# D3xx  Expanding moves in the center
# D4xx  Expanding moves in the corner
# D5xx  Defend one worm of the dragon
# D6xx  Make eyeshape on the edge
# D7xx  Make eyeshape in the center
# D8xx  Make eyeshape in the corner
# D9xx  Prevent intrusion
# D10xx Prevent a cut
# D11xx Attack a defect in the perimeter
# D12xx Kikashi
# D13xx Escape
# D14xx Ko
# 
#########################################################
#                                                       #
#         Expanding moves on the fourth line            #
#                                                       #
#########################################################


Pattern D1

?X..       jump out safely
O.*.
O...
....
....
----

:8,-,value(75)

?X..
Oa*.
Obc.
....
....
----

; oplay_attack(*,a,b,c,c)


Pattern D2

....        hane if attached
.*X.
..Oo          
....
....
----

:8,-,value(55)


Pattern D3

..X?       push to expand
..*O
....
....
....
----

:8,-,value(77)


Pattern D4

.X..        extend along the fourth line
oO*.
....
....
....
----

:8,-,value(83)



#########################################################
#                                                       #
#          Expanding moves on the third line            #
#                                                       #
#########################################################


Pattern D100

?XX?       Push along third line
?O*.
....
....
----

:8,-,value(80)


Pattern D101

?Xx??      Slide from fourth to third line
OO..?
...*.
.....
.....
-----

:8,-,value(80)


Pattern D102

?x.?
XX*.      Escape!
OO..
....
----

:8,-,value(80)


Pattern D103

?O.?
XX*.      Escape!
OO..
....
----

:8,-,value(85)


Pattern D104

??*O      save one stone
XO..
....
----

:8,-,value(75)

??*O
Xa..
....
----

;attack(a) && !oplay_attack(*,a)


Pattern D104b

?O.O*      save two stones while extending
XO...
.....
-----

:8,-,value(80)

?a.O*
Xa...
.....
-----

;attack(a) && !oplay_attack(*,a)


Pattern D105

|..O?
|..O?       try before extension
|.OXo
|..*?

:8,-,value(80)


Pattern D106

X.OX?        hanging connection on third line
.*.OO
.....
.....
-----

:8,-,value(80)


Pattern D107

?..x         attach
.X.O
.*..
....
....
----

:8,B,value(70)


Pattern D108

?..x         pull back
.X.O
XO*.
....
....
----

:8,-,value(80)


Pattern D109

?..x         extend
.X.O
*O..
....
....
----

:8,-,value(95)


Pattern D110

.....X.      one space jump to live
.*.O.oX
.....OO
.......
-------

:8,-,value(75)


Pattern D111

.Xx         push on third line
.*O
...
...
---

:8,-,value(79)


Pattern D112

o....?       two space jump
O..*.?
o...oo
.....o
------

:8,-,value(80)


Pattern D113

?xX..      draw back on the third line
X.O*.
.....
.....
-----

:8,-,value(80)


Pattern D114

..X        push to defend
X*O
...
...
---

:8,-,value(77)


Pattern D115

?X.?         knight's move if safe
?.*.
O..o
....
----

:8,-,value(75)

?X.?
?b*.
Oa.o
....
----

; !oplay_defend(*,a,b,a)


Pattern D116

O*X           climb to third line
..O
...
---

:8,-,value(50)

O*X
..a
...
---

;lib(a) >= 4


Pattern D117

*O.X           extend on third line
...O
....
----

:8,-,value(70)

*O.X
...a
....
----

;lib(a) >= 4


Pattern D118
# This is usually better than D213 when both match.

?OX?       hane to expand
O.*.
....
....
----

:8,-,value(81)

?aX?
O.*.
....
....
----

;lib(a)>1


Pattern D119
# This is usually better than D213 when both match.

OOX??           hane to expand
..O*.
.....
.....
-----

:8,-,value(81)


Pattern D120

??xxx?       better to make a base than jump in the center
?O...X
o..*..
......
......
------

:8,-,value(82)


Pattern D121

......        jump to maximum eyespace on third line
O.*.X.
......
......
------

:8,-,value(40)


Pattern D122

??...        hane moving out
XX*..
OO...
.....
.....
-----

:8,-,value(80)

??...        hane moving out
XX*..
OOa..
.....
.....
-----

; oplay_attack(*,a,a)

#########################################################
#                                                       #
#          Expanding moves on the second line           #
#                                                       #
#########################################################


Pattern D200

?XX??      Slide
OO...
...*.
.....
-----

:8,-,value(80)


Pattern D201

?XX??      Slide
OO..X
...*.
.....
-----

:8,-,value(81)


Pattern D202

?X..      Hane on second line
OOX.
..*.
....
----

:8,-,value(80)


Pattern D203

XX..      Push!
O*..
....
----

:8,-,value(80)


Pattern D204
# tm Pattern revised. (3.1.13)
# tm Pattern revised. (3.1.14)

??X?          push
?O*.
?.x.
----

:8,-,value(60)

??X?          push
AO*.
?.x.
----

;!x_somewhere(A) || !defend(A)


Pattern D205

?X?             hane
?OX
O.*
...
---

:8,-,value(60)


Pattern D206
#tm revised 3.1.14

?XxX?        extend
oO*?x
?....
-----

:8,-,value(65)


Pattern D207

O.X          second line kosumi
.*x
...
---

:8,-,value(76)


Pattern D208
# db reduced slightly (3.1.8)

???o      second line keima
X..O
.*..
....
----

:8,-,value(78)


Pattern D209

?OO        block on edge
X*.
...
---

:8,n,value(70)


Pattern D209b

?O.O        block on edge
X*..
....
----

:8,n,value(70)


Pattern D210

?OO?        expand eyespace
X*.O
....
----

:8,-,value(70)


Pattern D211

|..O
|..O       try before hanging connection
|.OX
|.*?

:8,-,value(71)


Pattern D212

??O???     capture one stone to improve eye space
?..OX?
.XOX*o
------

:8,-,value(75)


Pattern D213

??X?       slide
O..x
..*.
....
----

:8,-,value(80)

??X?
Oa.x
cb*.
....
----

;oplay_attack_either(*,a,b,c,a,c)


Pattern D214

oOx
.*X
...
---

:8,-,value(50)


Pattern D215

??..         urgent hane
..XX
.XOO
.*..
....
----

:8,-,value(80)


Pattern D216

.O.?
O.*.     make eye on edge
....
----

:8,-,value(75)


Pattern D217
# tm Pattern revised. (3.1.13)

o...
O.*.     expand eyespace
.x..
----

:8,-,value(60)


Pattern D217a
# tm Pattern added (3.1.14)
# see owl:170

?...
O.*.
.x..
----

:8,-,value(50)

?...
O.*.
.A..
----

; !oplay_defend(*,A)




Pattern D217b

O.XO
O.*.     expand eyespace
....
----

:8,-,value(80)


Pattern D217c
# tm added (3.1.14)
# see trevor:401
# Possible to sacrifice to gain tempo here.

O.X?     expand eye-space
O.*.
.x..
----

:8,s,value(10)


Pattern D218

xx...X.        slide (usually inferior to play on third line)
...O.oX
.*...OO
.......
-------

:8,-,value(70)


Pattern D219

OO*        capture edge stone to maybe make eye
.X.
---

:8,-,value(50)

OO*
.Aa
---

;does_attack(*,A) && !obvious_false_oeye(a)


Pattern D220

?oo.       jump to enlarge eyespace
oO.*
....
----

:8,-,value(40)

abo.
cO.*
....
----

; o_somewhere(a,b,c)


Pattern D221

oo?x        jump along second line
O.*.
....
----

:8,-,value(35)


Pattern D222
# tm Pattern revised. (3.1.13)

????        come straight out
xX.?
OO*.
..x.
----

:8,-,value(75)


Pattern D223

O.XX?          push
..O*o
....o
-----

:8,-,value(70)

ObXX?
.ac*o
....o
-----

;xplay_attack(a,b,c) && !oplay_attack(*,a,b,c)


Pattern D224

??xX           extend
oO*.
o...
----

:8,-,value(30)


Pattern D225

??X??        draw back
.O.OO
XO*..
.X...
-----

:8,-,value(45)


Pattern D226
# gf New pattern. (3.1.12)

?oO         threaten to escape and cut
X.o       
O*X
...
---

:8,-,value(45)

?ob
X.o       
a*X
...
---

;owl_goal_dragon(a) && owl_escape_value(b)>0


Pattern D227
# gf New pattern. (3.1.13)

X.O.	      jump and threaten to cut, connect, or force
OX..
O.*.
o...
----

:8,-,value(65)

X.O.
aX..
a.*.
o...
----

;owl_goal_dragon(a) && !oplay_attack(*,a)


Pattern D228
# gf New pattern. (3.1.13)

X.O.	      followup
OXX*
O.O.
o...
----

:8,-,value(65)

X.O.
aXX*
a.O.
o...
----

;owl_goal_dragon(a) && !oplay_attack(*,a)


Pattern D229
# gf New pattern. (3.1.14)

XOoo          capture or threaten to capture, improving eyespace
OX*o
....
----

:8,-,value(76)

Xboo
OX*o
...a
----

;owl_eyespace(a,b)


#########################################################
#                                                       #
#          Expanding moves in the center                #
#                                                       #
#########################################################


Pattern D300

X..?          push into the open
O*..
x..?

:8,-,value(80)

X..?
O*.a
x..?

;owl_escape_value(a) > 1


Pattern D301

X..?
O.*.
O..?

:8,-,value(80)

X..?
O.*a
O..?

;owl_escape_value(a) > 1


Pattern D302

XX.?          push along
O*..
?..?

:8,-,value(50)


Pattern D303
# The b classification inhibits the addition of * to the dragon.

XX.?         hane to try to escape
OOX.
?.*.
??.?

:8,b,value(70)


Pattern D304

OO?         block
X.?
*..

:8,-,value(75)

OO?         block
a.?
*..

; does_attack(*,a)


Pattern D305

??,?       attach
..X.
O.*.
....

:8,-,value(75)


Pattern D306

???o      keima to expand shape
X..O
.*..
....

:8,-,value(75)

???o
XdaO
.*bc
....

;oplay_attack_either(*,a,b,c,a,c) && oplay_attack_either(*,b,a,d,b,d)


Pattern D307

??.??      block
.*X..
O.OX?

:8,-,value(75)

??b??
.*Xc.
O.OD?

; oplay_attack(*,?,c,b,D)


Pattern D308

o.O         chimera
.*X

:8,ns,value(65)

ocO
b*X

; oplay_attack(*,b,b) && oplay_attack(*,c,c)


Pattern D308b

o.O         chimera
.*X

:8,s,value(75)

ocO
b*A

;lib(A)<=2 && oplay_attack(*,b,b) && oplay_attack(*,c,c) && safe_xmove(*)


Pattern D309

?O?        block off area
X*.
...

:8,-,value(60)

?O?
X*a
...

; oplay_attack(*,a,a)


Pattern D309b

?O?        block off area
X..
.*.
???

:8,-,value(61)

?O?
Xba
.*.
???

;oplay_attack(*,a,a) && oplay_attack(*,b,b)


Pattern D310a

?o?
*.O        hanging connection to make eye
.OX
oo?

:8,-,value(55)

?o?
*ba
.OX
oo?

; lib(a)>1 && safe_xmove(b) && oplay_attack(*,b,b)


Pattern D310b
# More worth if safe from atari.

?o?
*.O        hanging connection to make eye
.OX
oo?

:8,-,value(75)

?o?
*ba
.cX
oo?

; lib(a)>2 && lib(c)>2 && safe_xmove(b) && oplay_attack(*,b,b)


Pattern D311

OX?        try to seal off some space
.*O
.??

:8,-,value(60)

OX?
a*O
.??

; oplay_attack(*,a,a)


Pattern D313

..X         move out and separate
.*O
...
?XX

:8,-,value(75)


Pattern D314

??.XX     push to defend!
.XXOO
.*O..
.....

:8,-,value(80)


Pattern D315

X*o         hane starting an eye
O.o
OOo

:8,-,value(60)

X*o
Oao
OOo

; oplay_attack(*,a,a)


Pattern D316

?X?         connect to protect
O*O
...

:8,-,value(50)

?X?
O*O
.a.

; oplay_attack(*,a,a)


Pattern D317

OO?         urgent block
X*?
...

:8,-,value(95)

bb?
A*?
...

;does_attack(*,A) && does_defend(*,b)


Pattern D318

OOXX        descend - don't capture
OXOX
O.*.

:8,-,value(82)

OOXX
OAOX
O.*.

; does_attack(*,A)


Pattern D319
# db added (3.1.8)

...X      atari!
.*XO
X.Oo

:8,-,value(80)

...X
.*XA
X.Oo

; lib(A)>1


Pattern D320
# db added (3.1.8)

.*.?         jump out
...?
XO.o
o.O?

:8,-,value(50)



#########################################################
#                                                       #
#           Expanding moves in the corner               #
#                                                       #
#########################################################


Pattern D400

--+         sagari in corner
..|
O*|
Xx|

:8,-,value(70)

--+
..|
O*|
Ax|

;!attack(A)


Pattern D401

--+         capture in corner
..|
O.|
X*|

:8,-,value(80)

--+
..|
O.|
A*|

;lib(A)==1


Pattern D402

..O..|       enclose corner to live
*....|
.....|
.....|
-----+

:8,-,value(60)


Pattern D403

|.O??	      isolate corner stone
|..Ox
|.X*.
|....
+----

:8,-,value(70)


Pattern D404

?.O.|       proceed into corner for almost certain life
X.o.|
.*..|
....|
....|
----+

:8,-,value(90)


Pattern D405

?Oo.|       proceed into corner for almost certain life
X.o.|
.*..|
....|
....|
----+

:8,-,value(90)

?Oc.|
Xab.|
.*d.|
....|
....|
----+

; o_somewhere(b,c)||!oplay_defend(*,a,b,c,d,c)


Pattern D406

|ooOO?         realize eyespace in corner
|....?
|...*x
|....?
+-----

:8,-,value(70)


Pattern D407

|..X??         easy life in corner
|.*OX?
|...OO
|.....
+-----

:8,-,value(80)


Pattern D408

|ooO?	      slightly expand corner eyespace
|.O*X
|....
+----

:8,-,value(30)


#########################################################
#                                                       #
#            Defend one worm of the dragon              #
#                                                       #
#########################################################


Pattern D500

xXOO          descend to defend
XO..
.*..
----

:8,-,value(60)


Pattern D501

?OXx        connect
O*OX
..Xx

:8,-,value(80)


Pattern D502

?X.O        sagari
XO.O
.*..
----

:8,-,value(75)


Pattern D503
# The first constraint is necessary because the lower O stone 
# may be short on liberties. It might work to replace it with 
# a liberty constraint.

|..O
|*.O       hanging connection to protect eyespace
|?OX

:8,-,value(70)

|..O
|*aO
|?Oc

; oplay_attack(*,a,a) && !xplay_attack_either(*,?,a,a,c)


Pattern D504
# Don't apply this pattern on the edge. See patterns D505 and D506

?*.O        hanging connection to defend and make eye
?.OX

:8,-,value(85)

?*ba
?.cX

; lib(a)>1 && safe_xmove(b) && oplay_attack(*,b,b) && does_attack(b,c)


Pattern D505

OOX         hanging connection to defend and make eye
..O
.*.
---

:8,-,value(85)

Oax
.bc
.*.
---

; lib(a)>1 && safe_xmove(b) && oplay_attack(*,b,b) && does_attack(b,c)


Pattern D506
# Smaller value in this case since it leaves substantial aji. In
# particular we want to try the solid connection (pattern D44, value
# 80) before this pattern.

.OX         hanging connection to defend and make eye
..O
.*.
---

:8,-,value(75)

.ax
dbc
.*.
---

; lib(a)>1 && safe_xmove(b) && oplay_attack(*,b,b) && does_attack(b,c)
; && oplay_attack(*,d,d)


Pattern D507

?XX.o       defend two stones
XOO*.
?....
-----

:8,-,value(80)

?XX.o
Xaa*.
?....
-----

;does_defend(*,a)


Pattern D508

?XX*o
XOO.O     defend
?....
-----

:8,-,value(90)

?XX*o
Xaa.O
?....
-----

;does_defend(*,a)


Pattern D509

XO?      capture to defend
*XO
---

:8,-,value(90)

Xa?
*XO
---

;does_defend(*,a)


Pattern D510
# gf Devalued. (3.1.12)

?OX      capture to defend
*XO
?O?

:8,-,value(75)

?aX
*XO
?O?

;does_defend(*,a)


Pattern D511

O.o       rescue one stone
OX.
XO*
xXO

:8,-,value(75)

A.o
AX.
XO*
xXO

; !oplay_attack(*,A)


Pattern D512

..*..      atari before defending
X.XO.
.XO..
.....
.....
-----

:8,-,value(85)


Pattern D513

??...     connect 
XXO.o
XO*.o
....o
....o
-----

:8,-,value(85)


Pattern D514
# gf New pattern. (3.1.14)

?*.o       avoid double atari
XO..
?XOO

:8,-,value(76)

?*.o
AO..
?Bcc

;lib(A)>1 && lib(B)>1 && lib(c)==2


#########################################################
#                                                       #
#            Make eyeshape on the edge                  #
#                                                       #
#########################################################
#                                                       #
#  Moves that do not necessarily expand the eyeshape    #
#  but try to make what exists yield two eyes           #
#                                                       #
#########################################################


Pattern D600

?OX?         eye with reverse sente
OxOX
o*..
----

:8,-,value(80)


# Pattern D601
# gf Strange and ineffective pattern, removed. (3.1.14)
# 
# O*       prevent eye stealing cut
# XO
# --
# 
# :8,n,value(45)
# 
# O*
# AO
# --
# 
# ;vital_chain(A)


Pattern D602

?OO        make eye
O.O
.*.
---

:8,-,value(35)

?OO
O.O
a*b
---

;oplay_attack(*,a,a) && oplay_attack(*,b,b)


Pattern D603

XO.        make eye
O.O
.*.
---

:8,-,value(35)

XOc
O.O
a*b
---

;oplay_attack(*,a,a) && oplay_attack(*,b,b) && oplay_attack(*,c,c)


Pattern D604

OOX         descend to close eyeshape
.*.
---

:8,-,value(35)

ccA
b*.
---

;owl_eyespace(b,c) && !obvious_false_oeye(b) && !xplay_attack(*,A)


Pattern D605

oOo?
O.*O       make an eye and threaten another, while preventing atari
XO..
----

:8,-,value(35)


Pattern D606

XOX         try to partition eyespace rather than defend
O.O
.*.
---

:8,-,value(65)

XaX
O.O
b*c
---

;lib(a) == 1 && !obvious_false_oeye(b) && !obvious_false_oeye(c)


Pattern D607

OXO           avoid nakade while probably securing eyes
X*X
---

:8,-,value(70)

OBO
A*C
---

;lib(A)==1 && lib(B)==1 && lib(C)==2


Pattern D608

oOOX          eat lunch in the right direction
.X*.
----

:8,-,value(50)

oOOX
.A*.
----

;does_attack(*,A)


Pattern D608b
# gf New pattern. (3.1.11)

ooO.X          eat lunch in the right direction
.X*..
-----

:8,-,value(50)

oob.X
aC*..
-----

;owl_eyespace(a,b) && does_attack(*,C)


Pattern D609

?X?           preserve eyespace 
O*O
...
---

:8,-,value(80)


Pattern D610

??oOX       get out of liberty shortage
oOO.O
*XXO.
-----

:8,-,value(45)

??oOX
oOO.O
*XXOa
-----

;olib(a)==1


Pattern D611

xXOo        forestall snapback threat, securing eye
XO.O
.O*X
----

:8,-,value(60)

xXOo
XO.O
.O*A
----

;lib(A) == 2


Pattern D612

?OOO?         comb formation
O.X.O
O.*.O
-----

:8,-,value(50)


Pattern D613

?OOO?         comb formation
O.*.O
O.X.O
-----

:8,-,value(50)


Pattern D614

oOo           initiate ko to attempt for an extra eye
*.O
XOX
---

:8,-,value(30)

oOo
*.O
AOX
---

;oplay_defend(*,A) != WIN


Pattern D614b
# gf New pattern. (3.1.9)

ooOOo           attempt to live without ko
o...O
.*XOX
-----

:8,-,value(31)


Pattern D615

XOo?          secure eye shape against snapback threat
O.O?
O.*.
----

:8,-,value(50)

XOo?
A.O?
A.*b
----

;lib(A)==2 && xplay_attack(*,b,b)


Pattern D616

oOX??         secure eye with ko
O.OX?
*O.oX
-----

:8,-,value(25)

oOX??
O.OX?
*O.oX
-----

;xlib(*)>1


Pattern D616a
# higher value than D616 for owl.tst number 183 where this defense 
# gives fewer ko threats

??oOX??         secure one eye with ko
?.O.OX?
.X*O.oX
-------

:8,-,value(45)

??oOX??
?.O.OX?
.X*O.oX
-------

;xlib(*)>1


Pattern D617

ooOX??        secure eye with ko
*O.OX?
XXO.oX
------

:8,-,value(25)

ooOX??
*O.OX?
AAO.oX
------

;lib(A)<=2


Pattern D618

oOX??        take ko to make eye
O.OX?
XOX*X
-----

:8,-,value(25)

oOX??
O.OX?
AOX*X
-----

;lib(A)<=2


Pattern D619

oOX        capture to defend and maybe make eye
OX*
.OX
---

:8,-,value(39)


Pattern D620

XOo?        defend eye from collapse
O.O*
OO.X
----

:8,-,value(72)

XOo?
a.O*
aa.B
----

;lib(a)==2 && lib(B)==3


Pattern D621

?O??       threaten two eyes simultaneously
O.O?
oO*X
O..?
----

:8,-,value(45)


Pattern D622

*OX?       solidify eye and threaten to make more on the edge
OXOo
....
----

:8,n,value(45)

*OA?
OXOo
b...
----

;!attack(A) && oplay_attack(*,b,b)


Pattern D623

?XxOO?          make one eye
?XO.*X
..xO..
------

:8,s,value(95)

?XbOO?
?XO.*X
..aO..
------

; !x_somewhere(a) || !x_somewhere(b)


Pattern D624
# tm added (3.1.14)
# Needed in trevor:403

O.??	   Block on first line to make eye.
O.OX
ox*?
----

:8,-,value(40)


Pattern D625
# gf New pattern. (3.1.14)

O*o      prevent eye stealing capture
XO.
---

:8,n,value(45)

a*o
XO.
---

;lib(a)==1


#########################################################
#                                                       #
#            Make eyeshape in the center                #
#                                                       #
#########################################################
#                                                       #
#  Moves that do not necessarily expand the eyeshape    #
#  but try to make what exists yield two eyes           #
#                                                       #
#########################################################


Pattern D700

oOo          make eyeshape
O.O
.*.

:|,-,value(75)


Pattern D701

?*?          half eye sometimes missed by optics
O.O
?O.

:8,-,value(70)

?*?
OaB
?Ob

; (owl_topological_eye(a,B)>=2) && (owl_topological_eye(b,B)==2)


Pattern D702

?X?           half eye sometimes missed by optics
O*O
.O.

:8,n,value(70)

?X?
O*B
aOb

; (owl_topological_eye(a,B)==2)
; && ((owl_topological_eye(b,B)==2) || (owl_topological_eye(b,B)==3))


Pattern D703

?O*          defend half eye (reverse sente)
o.O
?o?

:8,-,value(70)

?O*
oaB
?o?

; does_attack(*,B) && owl_topological_eye(a,B)==3


Pattern D704

oO.         half eye sometimes missed
O.*
?o?

:8,-,value(35)

oOb
Ba*
?o?

; safe_xmove(b) && safe_xmove(*) && oplay_attack(*,b,b)
; && owl_topological_eye(a,B)==3


Pattern D704b

oO.         half eye sometimes missed
O.*
---

:8,-,value(35)

oOb
Ba*
---

; safe_xmove(b) && safe_xmove(*) && oplay_attack(*,b,b)
; && owl_topological_eye(a,B)==3


Pattern D705

O.X           block to cut off one stone
X*o
---

:8,-,value(45)

O.X           
a*o
---

; does_attack(*,a)


Pattern D706

?O*          save a half eye against an atari
o.O
?o?

:8,n,value(35)

?B*
oba
?o?

; lib(a)==2 && owl_topological_eye(b,B)==3


Pattern D707

XX?         make half eye with sente
O*O
O.O
o?o

:8,-,value(77)

AA?
O*O
O.O
o?o

; oplay_attack(*,A)


Pattern D708

?X??         make half eye with sente
O*O?
O.O?
?.oo
??Oo

:8,-,value(77)


?A??
O*O?
O.O?
X.oo
??Oo

; oplay_attack(*,A)


Pattern D709

oOOx          eat lunch in the right direction
.X*.
?OOx

:8,-,value(50)

oOOx
.A*a
?OOx

;olib(a)<=2 && does_attack(*,A)


Pattern D710

OO*             try to make center eye
O..
?OO

:8,-,value(30)

OO*
O.a
?OO

;!obvious_false_oeye(a)


Pattern D711

O?          capture nakade, might give new possibilities
X*

:8,-,value(25)

O?
A*

;lib(A)==1 && wormsize(A)>=3


Pattern D712

?O          capture nakade, might give new possibilities
X*

:8,-,value(25)

?O
A*

;lib(A)==1 && wormsize(A)>=3


Pattern D713

.OO?      make one eye
*..O
.OO?

:-,-,value(50)

.OO?
*.aB
.OO?

;owl_topological_eye(a,B)==3


Pattern D714

?O*?      make one eye
O..O
.OO?

:8,n,value(35)


Pattern D715

O*           defend against atari inside eyespace

:8,-,value(35)

a*

; lib(a)==2 && xlib(*)>1 && owl_big_eyespace(*,a)


Pattern D716
# gf New pattern. (3.1.11)

?*OO        secure eye
O..o
?oOX

:8,-,value(60)

?*OO
o.bo
?oaX

;owl_eyespace(b,a) && !owl_big_eyespace(b,a)


Pattern D717
# gf New pattern. (3.1.12)

oOXx         eat lunch to make certain eye
OXOX
O.*x

:8,-,value(81)

oOXx
OAOX
O.*x

;!oplay_defend(*,A)


Pattern D718
# tm New pattern (3.1.14)
# see owl:111

?X?
O*O       Expand eye space
...
OO.

:8,-,value(60)


#########################################################
#                                                       #
#           Make eyeshape in the corner                 #
#                                                       #
#########################################################
#                                                       #
#  Moves that do not necessarily expand the eyeshape    #
#  but try to make what exists yield two eyes           #
#                                                       #
#########################################################


Pattern D800

O...|       claim the corner to live
.*..|
....|
....|
----+

:8,-,value(60)


Pattern D801

XO.|       defend corner eye
.*.|
---+

:8,-,value(35)


Pattern D802

Oo.|       defend corner eye
X*.|
---+

:8,-,value(35)


Pattern D803

.O.|       defend corner eye
X*.|
---+

:8,-,value(35)


Pattern D804
# We need this pattern because the optics can't be relied on coming up
# with it when it's vital. Taking it out should cause some failures 
# in the ld_owl test suite.

OOO|       take corner eye
.*.|
---+

:8,-,value(25)

OOO|
a*.|
---+

;!obvious_false_oeye(a)


Pattern D804b
# This is kind of obscure, but sometimes D804 leads to a shortage of
# liberties, e.g. in the position
#
# .XXXXX..|
# .X.OOXXX|
# XXOOXOOO|
# X.O.X...|
# --------+
#
# After O playing on the 1-2 point, X fills an outer liberty and O dies.
# This pattern avoids that bitter fate.

XOOO|       take corner eye
X*..|
----+

:8,-,value(26)


Pattern D805

|oOO?
|...O         try to secure corner
|.*.o
+----

:8,-,value(36)


Pattern D805b

|oO.?
|.*.O         try to secure corner
|...o
+----

:8,-,value(30)


Pattern D806

|.XOO         miai eyes
|.*..
+----

:8,-,value(60)

|bAOO
|.*.a
+----

;attack(A) && !oplay_defend(*,a,b,A)


Pattern D807

|.XOO         miai eyes with ko
|.*..
+----

:8,-,value(60)

|bAOO
|.*.a
+----

;attack(A) && oplay_defend(*,a,b,A) != WIN


Pattern D808

|.XOO         life (but possibly unnecessarily small)
|.*.O
+----

:8,-,value(65)

|.AOO
|.*.O
+----

;does_attack(*,A)


Pattern D809

|.XOO         might give seki
|.*.O
+----

:8,-,value(25)

|.AOO
|.*.O
+----

;oplay_attack(*,A)


Pattern D810

|.XOoo        miai eyes or better
|.*...
+-----

:8,-,value(55)

|aXOoo
|.*...
+-----

;!oplay_defend(*,a,a)


Pattern D811

|ooO?         miai eyes or better
|o.Oo
|.*..
+----

:8,-,value(60)


Pattern D812

|oo?          work around eyespace generation weakness
|.OX
|*XO
+---

:8,-,value(70)


Pattern D813

|.OX            descend in corner
|.*?
+---

:8,-,value(30)


Pattern D814

|.O?         proper defense of L+1 shape
|.OO
|..O
|.*O
|...
+---

:8,-,value(85)


Pattern D815

|.OO?        proper defense of L+1 shape
|..O?
|*.OO
|....
+----

:8,-,value(85)


Pattern D816

|.OX        important shape point
|X.O       
|*.O
|...
+---

:8,s,value(35)


Pattern D817

|.OX        important shape point
|X.O
|*.O
|...
+---

:8,s,value(45)

|.aX
|X.O       
|*.O
|...
+---

;attack(a) && ! oplay_attack(*,a)


Pattern D818

|O??        throw in to improve eye potential
|.OO
|*X.
+---

:8,s,value(75)

|O??
|.OO
|*A.
+---

;oplay_defend(*,A) != WIN


Pattern D818b

|O??        throwin risky, try to live without
|.OO
|.X*
+---

:8,s,value(76)

|a??
|.OO
|.X*
+---

;lib(a) == 2


Pattern D819

|ooO
|*.O        secure corner eye
|.O.
+---

:8,-,value(30)


Pattern D820

|oo??       play ko to enlarge eyespace
|.OX?
|OX*X
+----

:8,s,value(40)


Pattern D820b

|oXO?       play ko to enlarge eyespace
|.OX?
|OX*X
+----

:8,s,value(40)

|oAO?
|.OX?
|OX*X
+----

;!oplay_defend(*,A)


Pattern D821

|oO??       might be passive, but almost certain life
|o.O?
|.*.O
|..oo
+----

:8,-,value(60)


Pattern D822

|o.O?       often best way to capture lunch
|O*OO
|.X.X
+----

:8,-,value(60)

|o.O?
|O*OO
|.X.A
+----

;lib(A)==1


Pattern D823a

|OOO?        form false eye trying to at least get seki
|.*.O
|OXXO
|.xxO
+----

:8,-,value(45)


Pattern D823b

|OOOO        at least seki
|*xxO
|OXXO
|.XxO
+----

:8,-,value(46)


Pattern D824

|OOO?        at least secure seki
|.O*O
|OXXO
|.X.O
+----

:8,-,value(45)


Pattern D825

|ooO        threaten to make eyes in the corner
|.OX
|*X.
|...
+---

:8,-,value(85)

|ooO
|.aX
|*B.
|...
+---

;!oplay_attack(*,a) && oplay_attack(*,B)


Pattern D826

|ooo        if nothing else works, make an eye in the corner
|*.o
|.O?
+---

:8,-,value(25)

|ooo
|*ao
|.O?
+---

;oplay_attack(*,a,a)


Pattern D827

|.XX???        special corner shape
|.OOXX?
|.*.OOX
|.....o
+------

:8,-,value(80)


Pattern D828

|ooO?          block on 1-2 with atari
|o.OX
|.*X.
+----

:8,-,value(80)


Pattern D829

|OO??          special corner shape, setting up ko
|..O?
|.O..
|..*.
+----

:8,-,value(55)

|aa??
|..O?
|.O..
|..*.
+----

;lib(a)==2


Pattern D830
# gf New pattern. (3.1.1)

|OO?          special corner shape, setting up ko
|..O
|XOo
|*.O
+---

:8,-,value(55)

|aa?
|..O
|XOo
|*.O
+---

;lib(a)==2


Pattern D831

|OOo?        (at least) ko
|.XOo
|OXXO
|.*xO
+----

:8,s,value(35)


Pattern D832
# gf New pattern. (3.1.9)

|O??        throw in to improve eye potential
|.Oo
|*XX
+---

:8,s,value(35)

|O??
|.Oo
|*AX
+---

;oplay_defend(*,A) != WIN


Pattern D833
# tm added (3.1.13)
# useful in manyfaces:8
# gf Revised pattern. (3.1.14)

?O?|	  vital corner point.
O.O|
O.x|
O.*|
o..|
---+

:8,-,value(40)


Pattern D834
# gf New pattern. (3.1.14)

?O?|	  often best defense
O.O|
O..|
O*X|
...|
---+

:8,-,value(40)


#########################################################
#                                                       #
#                  Prevent intrusion                    #
#                                                       #
#########################################################


Pattern D900

??O?        block on edge
XO.?
xX*o
----

:8,-,value(75)


Pattern D901

?*?         expand eyeshape
O.O
?.?

:|,n,value(60)

?*?
O.O
?a?

; !safe_xmove(a)


Pattern D902

XO.          stop connection under
.*X
---

:8,-,value(80)

XO.
.*A
---

; does_attack(*,A)


Pattern D903

XOX        descend to prevent connection
.*.
---

:8,-,value(85)

AOX
.*.
---

; does_attack(*,A)


Pattern D904

XOX         hane to prevent connection
*..
---


:8,-,value(84)

AOX
*..
---

; does_attack(*,A)


Pattern D905

*XOX        clamp to prevent connection
....
----

:8,-,value(86)

*AOX
....
----

; does_attack(*,A)


Pattern D906
# O dragons may not be amalgamated

O..O?       block connection
..XOX
...*.
-----

:8,-,value(45)


Pattern D907
# O dragons may not be amalgamated

O..O?       threaten one stone
.*XOX
.....
-----

:8,-,value(45)


Pattern D908

?OO??       threaten one stone
O..O?
.*XOX
.....
-----

:8,-,value(75)

?OO??
O.aO?
.*XOX
.....
-----

;oplay_attack(*,a,a)


Pattern D909
# gf New pattern. (3.1.14)

O*           stop capture inside eyespace, not ko

:-,-,value(55)

a*

;lib(a)==1 && owl_eyespace(*,a) && olib(*) > 0


#########################################################
#                                                       #
#                    Prevent a cut                      #
#                                                       #
#########################################################


Pattern D1000

O*          prevent opponent's safe cut
XO

:8,C,value(60)

O*
aO

; safe_xmove(*) && !xplay_attack(*,a)


Pattern D1001

X*O       connect
?OX

:8,n,value(70)

X*O
?Oa

;!attack(a) || (wormsize(a)<=2 && does_attack(*,a))


Pattern D1001b

?XOOo
XO.X*
x.O..
-----

:8,n,value(71)


Pattern D1002
# Smaller value if opponent can't cut.
# gf Revised constraint. (3.1.11)

X*O       connect
?OX

:8,-,value(35)

X*O
?Oa

; !attack(a) && xlib(*) > 1


Pattern D1003
# Notice similarity with D310a, D310b.

????
?*.O       hanging connection to protect eyespace
?.OX
?oo?

:8,-,value(70)

????
?*ab
?.Oc
?oo?

;lib(b)>1 && oplay_attack(*,a,a) && !xplay_attack_either(*,?,a,a,c)


Pattern D1004
# Less attractive when making empty triangle.
# gf Added n classification. (3.1.14)

????
?*.O       hanging connection to protect eyespace
?OOX

:8,n,value(69)

????
?*ab
??Oc

;lib(b)>1 && oplay_attack(*,a,a) && !xplay_attack_either(*,?,a,a,c)


Pattern D1004b
# gf New pattern. (3.1.14)

----
oooo       sometimes useful to partion eyespace on edge or in corner
.*.O       
oOOX

:8,-,value(45)


Pattern D1005

....       repair shape in center
.*OX
.OXx

:8,-,value(80)


Pattern D1006
# gf Added n classification. (3.1.11)

OXO            connect underneath
.*.
---

:|,n,value(60)

aXb
.*.
---

;lib(a)>1 && lib(b)>1


Pattern D1006b
# gf New pattern. (3.1.14)

OXO            connect underneath
.*.
---

:|,n,value(80)

aXb
.*.
---

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1007
# gf Revised constraint. (3.1.14)

OXO            connect underneath in sente
.*.
---

:|,-,value(90)

bAc
.*.
---

;lib(A) == 2 && lib(b)>1 && lib(c)>1 && !attack(A)


#########################################################
#                                                       #
#            Attack a defect in the perimeter           #
#                                                       #
#########################################################


Pattern D1100
# The B classification inhibits the addition of * to the dragon.

X*          attack the surrounding chain
OX

:/,b,value(90)

ba
Oc

; !oplay_defend_both(a,b,c) && vital_chain(b) && vital_chain(c)


Pattern D1101

...          try to break out
X*X
?O?

:|,-,value(95)

.a.
b*c
?O?

; oplay_break_through(*,a,b,a,c) == WIN


Pattern D1102

...        create cutting points
X*X
?O?

:|,-,value(70)

...
A*B
?O?

;lib(A)<=3 || lib(B)<=3


Pattern D1103

?OO.
OXX*     capture or cut
?...
....
----

:8,-,value(85)

?OOa
OBB*
?...
....
----

;oplay_attack_either(*,a,B,a)


Pattern D1104
# The two O's may be in different dragons.
# Normally this is enough to live.

??oo?       kill one stone
.O..O
...*X
.....
-----

:8,-,value(100)

??oo?
.O..O
...*a
.....
-----

; does_attack(*,a)


Pattern D1105

??o?       cut off stone on second line
?X*o
OOXo
....
----

:8,b,value(35)


Pattern D1106

.O?           hane, threatening capture
...
X*.
O.X

:8,-,value(77)

.O?
...
B*.
OaX

; oplay_attack(*,a,B)


Pattern D1107

XOXx       capture to defend
*XO.
----

:8,-,value(35)


Pattern D1108

X....      surrounding chain collapses
OXX*.
.OOX.
.....

:8,B,value(95)

Ba...
OCC*.
eOODf
.....

; !oplay_defend_both(*,f,a,B,C) && oplay_attack(*,D) && !safe_xmove(e)


Pattern D1108b

X*...      surrounding chain collapses
OXXO.
.OOXX
.....

:8,B,value(95)

B*...
OCCO.
.aaXX
.....

;owl_goal_dragon(a) && !oplay_defend_both(*,B,C)


Pattern D1109

?O?         capture left or right
X*X
.X.

:8,-,value(60)

?O?
A*B
.X.

; oplay_attack(*,A) && oplay_attack(*,B)


Pattern D1110
# may overlap with D1333 and D1335

OOX.         double atari
OX*.
X..?

:8,b,value(75)

OOB.
OX*.
Xa.?

; oplay_attack(*,a,B)


Pattern D1111

?..??      cutting combination
OX*.?
?OX..
?OX..
?oOX.

:8,Bs,value(90)

?a.??
OX*g?
?hXcf
?OXbd
?oiXe

;owl_goal_dragon(h) && lib(i)>1 && oplay_attack(*,a,b,c,d,e,f,g,e)


Pattern D1112

??O.?      cutting combination, followup
?OX..
?OX*.
?oOX.

:8,B,value(90)

??Oe?
?fXad
?OX*b
?ogXc

;owl_goal_dragon(f) && lib(g)>1 && oplay_attack(*,a,b,c,d,e,c)


Pattern D1113

??O.?      cutting combination, followup
?OXX.
?OXO*
?oOX.

:8,B,value(90)

??Oc?
?dXXb
?OXO*
?oeXa

;owl_goal_dragon(d) && lib(e)>1 && oplay_attack(*,a,b,c,a)


Pattern D1114

??O.?      cutting combination, followup
?OXX*
?OXOO
?oOXX

:8,B,value(90)

??Oa?
?cXX*
?OXOO
?odBB

;owl_goal_dragon(c) && lib(d)>1 && oplay_attack(*,a,B)


Pattern D1115

o.X?       continue ladder
.*OX
.XOO
?.X?

:8,-,value(80)


Pattern D1116

XXOo           capture (possibly with ko)
.*XO
...X
----

:8,-,value(65)

XXOo
.*XO
..aX
----

;oplay_attack(*,a,a)


Pattern D1117

.xX?        try to push out
..*O
..XO
..xx
----

:8,-,value(75)

.xX?
.a*O
..BO
..xx
----

;oplay_attack(*,a,B)


Pattern D1118

ooo?       capture to defend and threaten escape
X*X?
OXOX
?O.?


:8,-,value(85)


Pattern D1119

oOX.?      might break through somewhere
?*..?
X.X.?
...o?
?????

:8,-,value(70)

oOX.?
?*..b
X.X.?
...o?
?a???

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1120

ooX.?       might break through
?O*.?
X.X.?
...o?
?????

:8,-,value(81)

ooX.?
?O*.b
X.X.?
...o?
?a???

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1120b

ooX.       might break through
?OOX
X*X.
...o

:8,-,value(81)


Pattern D1121

OoXo       push into the open
?*.o
X..o
oooo

:8,-,value(70)


Pattern D1122

?O?        Cut and maybe capture to make eye
X*X
---

:|,-,value(45)

?O?
A*B
---

;oplay_attack(*,A,A) || oplay_attack(*,B,B)


Pattern D1123

oX*o      break through
OOX.
OX..
X..?

:8,-,value(86)

oB*o
OOXa
OX..
X..?

;oplay_attack(*,a,B)


Pattern D1124

OXO        double atari
X*?

:8,b,value(90)

OAc
B*?

;lib(A)==2 && owl_escape_value(c)>0 && !oplay_defend_both(*,A,B)


Pattern D1125

ooo?
...o
.*X.
?OOX

:8,-,value(79)

abc?
...o
.*X.
?OOX

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1126
# gf Revised constraint and added B classification. (3.1.8)

OX.      cut to capture something
X*.
..?

:8,b,value(82)

cB.
A*.
b.?

;lib(c)>1 && oplay_attack(*,A) && oplay_attack(*,b,B)


Pattern D1127
# gf Added constraint and B classification. (3.1.8)

.O.        atari!       
X*X
OX.
oO?

:8,b,value(35)

.O.
X*X
aX.
oO?

;lib(a)>1


Pattern D1128
# gf Added B classification. (3.1.8)

...o       set up multiple ataris
...O
.*XO
?XO?

:8,B,value(45)


Pattern D1129
# db added B class (3.1.8)

..*o       set up multiple ataris
..XO
.OXO
?XO?

:8,B,value(77)


Pattern D1130

O.??         prevent cut
XO*X
xXO?

:8,-,value(35)

Oa??
XO*X
xbO?

; !safe_xmove(a) && lib(b)>1


Pattern D1131

OX       cut to capture something and escape
X*
?O

:8,-,value(90)

bC
D*
?a

;owl_goal_dragon(a) && owl_escape_value(b)>0
;&& oplay_attack(*,C) && oplay_attack(*,D)


Pattern D1132
# db added (3.1.7)

?X*O          cut to find defects
OOX.

:8,b,value(80)

?A*O
OOB.

; oplay_attack_either(*,A,B)


Pattern D1133
# gf New pattern. (3.1.9)

?X.o
Ox*.         escape
oO..
----

:8,-,value(65)

?X.o
Ox*a
oO..
----

;owl_escape_value(a)>0

Pattern D1134
# tm new pattern (3.1.14)
# Give a very low value, unless add lots of constraints.
# See trevor:520.

XXO      Cut!
O*X
OX.
?..

:8,b,value(5)


Pattern D1135
# tm new pattern (3.1.14)
# See trevor:330

O*.	connect out, threaten cut
X.?

:8,-,value(35)

O*a
cB?

; owl_escape_value(a)>0 &&
; oplay_attack(*,a,c)



Pattern D1136
#tm new pattern (3.1.14)
#See strategy:206

OOO	very low value - can't hurt to try!
..X
X*.
???

:8,b,value(5)


Pattern D1137
# gf New pattern. (3.1.14)
# See buzco:6

?oo
?..
X*.
O.?

:8,B,value(65)

?oc?
?..d
B*.o
Oa??

;lib(B)<=4 && owl_escape_value(c) + owl_escape_value(d) > 0
;&& oplay_attack_either(*,a,a,B)


########################################################
#                                                       #
#                       Kikashi                         #
#                                                       #
#########################################################
#                                                       #
#  Forcing moves that may improve the eyespace          #
#                                                       #
#########################################################


Pattern D1200

.X...|         forcing move
.*X..|
.OOX.|
.....|
-----+

:8,-,value(80)


Pattern D1201

XOo         atari to build eyespace
*.O
?oo

:8,-,value(50)

AOo
*.O
?oo

; lib(A)==2


Pattern D1202

o*X?         move up with atari
o.OO
....
----

:8,-,value(75)

o*A?
o.OO
....
----

;lib(A) <= 2


Pattern D1203

OOX           block in sente 
.*x
---

:8,-,value(80)

OOA
b*x
---

;!attack(A) && oplay_attack(*,A) && !obvious_false_oeye(b)


Pattern D1204

OOo           block in sente 
.*X
---

:8,-,value(85)

OOo
b*A
---

;wormsize(A)>=3 && !attack(A) && oplay_attack(*,A) && !obvious_false_oeye(b)


Pattern D1205

?X?         connect, cut, and threaten to capture
O*O
?X?

:|,-,value(50)

?A?
O*O
?X?


;oplay_attack(*,A)


Pattern D1206

oOo        capture, threatening to take again
OXO
?*X

:8,-,value(40)

oOo
OXO
?*A

; oplay_attack(*,A)


#########################################################
#                                                       #
#                       Escape                          #
#                                                       #
#########################################################


Pattern D1300

OX         connect out
.*
XO

:8,-,value(90)

cb
a*
XO

;owl_escape_value(c)>0 && oplay_attack_either(*,a,a,b)


Pattern D1300b

OX         connect out
*.
XO

:8,-,value(89)

cX
*a
BO

;owl_escape_value(c)>0 && oplay_attack_either(*,a,a,B)


Pattern D1301

?X.?       connect to another dragon
O*.O
....

:8,-,value(90)

?Xc?
f*ag
.ebd

;(!owl_goal_dragon(f) || !owl_goal_dragon(g))
;&& (oplay_attack(*,a,b,c,d,e,e) || oplay_attack(*,a,b,c,e,d,d))


Pattern D1302

OX?        try to connect out
.*O
.??

:8,-,value(80)

bX?
a*c
.??

;(!owl_goal_dragon(b) || !owl_goal_dragon(c)) && oplay_attack(*,a,a)


Pattern D1303

?????
oooo?   try to escape
X.*o?
?O.o?
??Xo?

:/,-,value(80)

?????
ooca?
X.*b?
?O.o?
??Xo?

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1304

ooooo    try to escape
....o
X.*.o
?O..o
??X.o

:/,-,value(80)

oooab
....c
X.*.o
?O..o
??X.o

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1305

oooo
..*.    try to escape
X.Ox
?O.X

:8,-,value(80)

oabc
..*.
X.Ox
?O.X

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1306

??oo
xX*.    try to escape
X.O.
?O.X

:8,-,value(79)

??ab
xX*.
X.O.
?O.X

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1307

???oo
xX.*o    try to escape
X.O.?
?O.??

:8,-,value(80)

???oa
xX.*o
X.O.?
?O.??

;owl_escape_value(a) > 0


Pattern D1308

oooo
O.*o    try to escape
....
....
----

:8,-,value(75)

ooob
O.*a
....
....
----

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1309

oo..o
O..*o    try to escape
.....
.....
-----

:8,-,value(81)

oo..b
O..*a
.....
.....
-----

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1309b
# More positive shape than previous pattern.

?ooo?    try to escape
o.*.o
O...O
.....
.....
-----

:8,-,value(82)

?ooo?
o.*.b
O...a
.....
.....
-----

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1310

oooo
oooo    try to escape
X*oo
?OX?

:8,-,value(80)

oabo
oooc
X*oo
?OX?

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1311

oooo
o.oo    try to escape
.*.o
XOX?

:8,-,value(80)

oabo
o.oc
.*.o
XOX?

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1312

ooooo
....o
....o    try to escape
X*..o
?OX??

:8,-,value(80)

ooabo
....c
....o
X*..o
?OX??

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1313

O...
O.*.     run away
....
????

:8,-,value(55)

O..b
O.*a
....
????

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1314

o.o?
O.O.     run away
....
....
.*..

:8,-,value(55)

o.o?
O.O.
....
....
.*..

;owl_escape_value(*) > 0


Pattern D1315

o.o
O.O     run away
...
.*.
...

:8,-,value(50)

o.o
O.O
...
.*.
.a.

;owl_escape_value(a) > 0


Pattern D1316

OX          connect out
*O

:8,n,value(35)

OX
*a

;!owl_goal_dragon(a)


Pattern D1317

o..X         move out, separate, and escape
o.*O
o...
??XX

:8,-,value(90)

o..X
a.*O
o...
??XX

;owl_escape_value(a)>0


# Pattern D1318
# # gf Too vague, reduced. (3.1.9)
# # gf Still too vague, removed. (3.1.14)
# 
# ??...      try to run towards center
# ??...
# ??.*.
# ??..O
# 
# :8,-,value(65)


Pattern D1319

...      jump to the center
...
.*.
...
oOo
ooo
ooo
---

:8,-,value(82)


Pattern D1320

O*O      connect to friendly dragon

:+,n,value(35)

a*b

;!owl_goal_dragon(a) || !owl_goal_dragon(b)


Pattern D1321

*.O
O.O      connect to friendly dragon by bamboo joint

:8,n,value(36)

*.b
a.b

;!owl_goal_dragon(a) || !owl_goal_dragon(b)


Pattern D1322

.*O
OXO      connect to friendly dragon by atari

:8,n,value(36)

.*b
aCb

;(!owl_goal_dragon(a) || !owl_goal_dragon(b)) && lib(C) <= 2


Pattern D1323
#    without more context this is often an inferior
#    solution (for example games/manner.sgf move 12).

O*O      connect to escape

:+,n,value(80)

a*b

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1324

*.O
O.O      connect by bamboo joint to escape

:8,n,value(86)

*.b
a.b

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1325

.*O
OXO      connect to friendly dragon by atari to escape

:8,n,value(86)

.*b
aCb

;(owl_escape_value(a)>0 || owl_escape_value(b)>0) && lib(C) <= 2


Pattern D1326

O*O      connect to escape

:+,-,value(35)

a*b

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1327

*.O
O.O      connect by bamboo joint to escape

:8,-,value(36)

*.b
a.b

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1328

.*O
OXO      connect to friendly dragon by atari to escape

:8,-,value(36)

.*b
aCb

;(owl_escape_value(a)>0 || owl_escape_value(b)>0) && lib(C) <= 2


Pattern D1329

o....       jump towards safety
O.*..
o....

:8,-,value(35)


Pattern D1330

?O.x          break out into the center
X*.X
....
oooo

:8,-,value(90)

?O.x
E*cX
dab.
ofoo

;owl_escape_value(f)>0 && !oplay_defend_both(*,a,b,c,d,a,E)


Pattern D1331

?O.x          break out into the center, followup
XO.X
.X*.
oooo

:8,B,value(90)

?O.x
COaX
bD*.
oeoo

;owl_escape_value(e)>0 && !oplay_defend_both(*,a,b,C,D)


Pattern D1332
# gf Revised. (3.1.12)

?O?x          break out into the center, followup
XO*X
xXO.
oooo

:8,-,value(95)

?O?x
XO*X
xXO.
oaoo

;owl_escape_value(a)>0


Pattern D1333

?O?          break out into the center, followup
XOX
*XO
ooo

:8,B,value(90)

?O?
AdX
*BO
oco

;owl_escape_value(c)>0 && owl_goal_dragon(d) && !oplay_defend_both(*,A,B)


Pattern D1333b

?O?          break out into the center, followup
XOX
*XO
?O?

:8,-,value(90)

?O?
AdX
*BO
?c?

;owl_escape_value(c)>0 && owl_goal_dragon(d)


Pattern D1334
# This is not handled as a lunch because capturing only gives a false eye.

XOX          break out into the center, followup
OXO
o*o

:|,-,value(95)

XOX
OXO
o*o

;owl_escape_value(*)>0


Pattern D1335

?O??          double atari to escape
.XO?
o*XO
oo.?

:/,B,value(95)

?O??
.Xb?
o*XO
ao.?

;owl_escape_value(a)>0 && owl_goal_dragon(b) && lib(b)>1


Pattern D1336

XOo           capture to escape
*XO
oOX

:8,-,value(95)

?Oo
*Xb
aOX

; owl_escape_value(a)>0


Pattern D1337

?OO?          break out into the center
X..X
..*.
oooo

:8,B,value(90)

?OO?
EbaX
dc*.
ofoo

;owl_escape_value(f)>0 && !oplay_defend_both(*,a,b,c,d,c,E)


Pattern D1338

?OO?          break out into the center, followup
X*XX
..O.
oooo

:8,-,value(90)

?OO?
C*XX
baO.
odoo

;owl_escape_value(d)>0 && !oplay_defend_both(*,a,b,a,C)


Pattern D1339

?O?          break out into the center, followup
X*X
oOo
ooo

:|,-,value(90)

?O?
X*X
.O.
odo

;owl_escape_value(d)>0


Pattern D1340

o.X?          tunnel out
OX*O
....
----

:8,-,value(85)

obX?
cX*d
.a..
----

;(owl_escape_value(c)>0 || owl_escape_value(d)>0) && oplay_attack(*,a,a)
;&& !oplay_attack_either(*,b,a,*,a) && !oplay_attack_either(*,b,a,c,a)


Pattern D1341

?O??          break out into the center
X*.X
...?
ooo?

:8,-,value(60)

?O??
X*.X
...?
oao?

;owl_escape_value(a)>0


Pattern D1342

X..?          miai to make eye or escape into center
O*X?
OX..
o...
----

:8,-,value(60)


Pattern D1343a

ooo?           escape into center
o..X
o.*.
?x.O

:8,-,value(80)

obo?
a..X
o.*o
?xoO

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1343b

ooo?           escape into center
o..X
o.*o
?XoO

:8,-,value(80)

obo?
a..X
o.*o
?XoO

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1343c

ooo?           escape into center
o..X
o*.o
?.oO

:8,-,value(80)

obo?
a..X
o*.c
?.dO

;o_somewhere(c,d) && (owl_escape_value(a) + owl_escape_value(b) > 0)


Pattern D1343d

ooo?           escape into center
o..X
o*..
?..O

:8,B,value(75)

obo?
a..X
o*.o
?.oO

;owl_escape_value(a) + owl_escape_value(b) > 0


Pattern D1344

?XX?o
oO*.o       escape along edge
o....
-----

:8,-,value(85)

?XX?o
oO*.a
o....
-----

;owl_escape_value(a)>0


Pattern D1345

OXO        atari to connect
.*.

:8,b,value(85)

cDe
a*b

;lib(D)==2 && (owl_escape_value(c)>0 || owl_escape_value(e)>0)
;&& oplay_attack(*,?,a,b,b)


Pattern D1346

?O.X          break out into the center
X.*.
x...
oooo

:8,-,value(90)

?O.X
X.*.
x...
oabc

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1347

OX?           capture (possibly with ko)
XO*
...
---

:8,-,value(75)

OX?
AO*
...
---

;!oplay_defend(*,A)


Pattern D1348

O.?
.*O      connect to friendly dragon to escape

:8,n,value(36)

a.?
.*b

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1349

O.?
.*O      connect to friendly dragon to escape

:8,-,value(36)

a.?
.*b

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1350

?*..       capture lunch to escape (may be undervalued)
OXO.

:8,-,value(85)

?*bc
OAOd

;lib(A) == 1
;&& (owl_escape_value(b) + owl_escape_value(c) + owl_escape_value(d)) > 0


Pattern D1351

XO?
.*X
o.?

:8,-,value(85)

XO?
.*X
a.?

;owl_escape_value(a)>0


Pattern D1352

O.OX          escape or threaten to
..*O

:8,-,value(80)

ObaX
dc*O

;!owl_goal_dragon(a) && xplay_attack_either(b,c,d,b,d)


Pattern D1353

X...         hane to escape
.*..
OX..
....
----

:8,-,value(80)


Pattern D1354

?...?        jump away
?.*.?
X...x
?OOO?


:8,-,value(75)

?abc?
?.*.?
X...x
?OOO?

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1355

OXXO         connect out
.O*.
----

:8,-,value(70)

aXXb
.O*.
----

;lib(a)>1 && lib(b)>1

Pattern D1356

o....         jump towards safety
O.*..
o....

:8,-,value(80)

o..a.
O.*b.
o..c.

; owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1357

o...o         block/connect to escape
O....
O.*..
?OXOo

:8,-,value(81)

o...a
O...b
O.*.c
?OXOo

; owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1358

O..?         connect to escape
O.*O

:8,-,value(81)

bde?
bc*a

;(owl_escape_value(a) > 0 || owl_escape_value(b) > 0)
;&& oplay_attack_either(*,c,d,e,c,e)


Pattern D1359

?...?
.....
?.*X.
?..OX
?.Oo?

:8,-,value(85)

?bc.?
a....
?.*X.
?..OX
?.Oo?

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1360

??..           run while connecting
..*.
.O..
...x
.O.x

:8,-,value(85)

??ac
..*b
.O..
...x
.O.x

;owl_escape_value(a) + owl_escape_value(b) + owl_escape_value(c) > 0


Pattern D1361

X.X         push to expose weakness
O*.
?X?
 
:8,-,value(65)


Pattern D1362
# db added (3.1.8)

?X..       try to escape
?.*.
O...
o...
....
----

:8,-,value(85)


Pattern D1363
# db added (3.1.8)

oOX?          force the opponent to cut, exposing thinness
.*.?
.XOO
..X.
?...

:8,B,value(75)


Pattern D1364
# db added (3.1.8)

.OX?          atari!
.XOO
.*X.
?...

:8,B,value(85)


Pattern D1365
# db added (3.1.8)

OX?          atari!
XOO
OX*
...

:8,B,value(85)


Pattern D1366
# db added (3.1.8)
# gf Revised. (3.1.11)

XOO?         try to break out
OXO?
.X*x
o...
?o..

:8,-,value(85)

Xaa?
OXa?
.X*x
o...
?o..

;owl_goal_dragon(a)


Pattern D1367
# db added (3.1.11)

...?
.*.?       jump out
...X
?OO?

:8,-,value(60)


Pattern D1368
# gf added (3.1.12)

...?       move out
.*X?       
..OX
XOo?

:8,-,value(70)

b..?
.*X?       
..OX
Xao?

;lib(a)>1 && owl_escape_value(b)>0


Pattern D1370
# gf New pattern. (3.1.13)

oo?        move out
..X        
.*.
XO?

:8,-,value(75)

ao?
b.X
.*.
XO?

;owl_escape_value(a)>0 || owl_escape_value(b)>0


Pattern D1371
# gf New pattern. (3.1.13)

oOo        move out
...        
.*X
.O?

:8,-,value(85)

oao        move out
...        
.*X
.O?

;owl_escape_value(a)>0


Pattern D1372
# gf New pattern. (3.1.14)

OX.         escape underneath
.*O
---

:8,-,value(85)

aB.
.*O
---

;owl_escape_value(a)>0 && !attack(B)


Pattern D1373
# gf New pattern. (3.1.14)

o*XO        capture to escape


:-,-,value(85)

a*BO

;owl_escape_value(a)>0 && does_attack(*,B)


Pattern D1374
# gf New pattern. (3.1.14)

oo..Xo        connect underneath
...*O.
------

:8,-,value(55)

ab..Xo
...*O.
------

;o_somewhere(a,b) && owl_escape_value(a) + owl_escape_value(b) > 0


#########################################################
#                                                       #
#                          Ko                           #
#                                                       #
#########################################################


Pattern D1400

----        connect (don't fight ko)
..X?
O*OX
?OX?

:8,-,value(95)

----
..C?
O*OA
?OB?

;lib(A)>1 && lib(B)>1 && lib(C)>1


Pattern D1400b

----        capture, no ko
.*X?
O.OX
?OX?

:8,-,value(95)

----
.*A?
O.Oa
?Ob?

;lib(A)==1


Pattern D1401

----        do fight ko
.*X?
O.OX
?OX?

:8,-,value(35)

----
..X?
O*Oa
?Ob?

; (lib(a)>1) && (lib(b)>1)


Pattern D1402

.OX?        take the ko
OX*X
----

:8,s,value(45)

aBX?
OX*X
----

; (legal_omove(*) && owl_topological_eye(a,B)==3)
; || (!legal_omove(*) && owl_topological_eye(a,B)==2)


Pattern D1403

|XO?         corner ko capture
|*XO
+---

:8,s,value(30)


Pattern D1404

|..O          start corner ko
|*XO
|.OX
+---

:8,s,value(80)

|..O
|*AO
|.OX
+---

;oplay_defend(*,A) != WIN


Pattern D1405

|X.O          start or continue corner ko
|*XO
|xOo
+---

:8,s,value(80)

|X.O
|*AO
|xOo
+---

;oplay_defend(*,A) != WIN


Pattern D1405b

|X.O          start or continue corner ko
|OXO
|.*o
+---

:8,s,value(80)

|X.O
|OAO
|.*o
+---

;oplay_defend(*,A) != WIN


Pattern D1406

|X*O          try to avoid corner ko
|.XO
|.Oo
+---

:8,-,value(55)


Pattern D1407

|.OX?        defend corner eye space
|..O?
|.O*X
|....
+----

:8,-,value(75)


Pattern D1408

?X??       take ko
X*X?
OXOX
?O.O

:8,s,value(45)


Pattern D1409

?X?|       take ko
X*X|
OXO|
?O.|

:8,s,value(45)


Pattern D1410

?OO|       throw in to set up ko or squeeze
O.X|
OOX|
o.*|
---+

:8,s,value(35)


Pattern D1411

|*XO     play corner ko
|XO.
+---

:8,s,value(45)

|*AO
|XO.
+---

;attack(A) != 0


Pattern D1411b

|*XO     play corner ko
|XOo
+---

:8,s,value(35)

|*AO
|XOo
+---

;oplay_defend(*,A) != WIN


Pattern D1412

|O??        capture to finish ko
|.OO
|OX*
+---

:8,-,value(35)


Pattern D1413

|O??        squeeze to finish ko
|XOO
|.X*
+---

:8,-,value(35)

|a??
|XOO
|.X*
+---

;lib(a) > 1


Pattern D1414

|oo???        try to live with double ko
|.O???
|XOO??
|.XO*o
|X.X.o
+-----

:8,-,value(45)


Pattern D1415
# Generalizes D1412. Necessary to have one O stone in the pattern to
# identify the goal.

?O            capture to finish ko
X*

:8,-,value(35)

?O
A*

;lib(A)==1 && finish_ko_helper(A)


Pattern D1416
# Generalizes D1412. Necessary to have one O stone in the pattern to
# identify the goal.

X*O           capture to finish ko

:-,-,value(35)

A*O

;lib(A)==1 && finish_ko_helper(A)


Pattern D1417
# Generalizes D1413. Necessary to have one O stone in the pattern to
# identify the goal.

?O            squeeze to finish ko
X*

:8,-,value(35)

?O
A*

;lib(A)==2 && olib(*)>1 && squeeze_ko_helper(A)


Pattern D1418
# Generalizes D1413. Necessary to have one O stone in the pattern to
# identify the goal.

X*O           squeeze to finish ko

:-,-,value(35)

A*O

;lib(A)==2 && olib(*)>1 && squeeze_ko_helper(A)


Pattern D1419

oOX?          take ko to preserve eye
O.OX
XOX*
----

:8,s,value(35)

oOX?
O.OX
AOX*
----

;attack(A)


Pattern D1420

oOX?          take ko to preserve eye
O.OX
.OX*
----

:8,s,value(35)

oOX?
O.OX
aOX*
----

;!safe_xmove(a)


Pattern D1421

xXO          avoid ko
X.*
---

:8,s,value(25)

xXa
X.*
---

;xplay_defend(*,a) != WIN && oplay_attack(*,a) == 0


Pattern D1422

|XX??      keep ko going
|OXOO
|.OXX         
|O.O*
+----

:8,s,value(25)

|XX??
|OXOO
|.OAA         
|O.O*
+----

;lib(A)==1


# END OF FILE
