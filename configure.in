dnl Process this file with autoconf to produce a configure script.

dnl this is to determine if the config script is running in the proper place
dnl just give it one file relative to where it should be
AC_INIT
AC_CONFIG_SRCDIR([engine/dragon.c])

AM_CONFIG_HEADER(config.h)
AC_PREREQ(2.50)dnl               dnl Minimum Autoconf version required.

AH_TEMPLATE([VERSION],
[Define to the version of the distribution.])

dnl this defines VERSION and PACKAGE
AM_INIT_AUTOMAKE([gnugo], [3.3.14])

AM_MAINTAINER_MODE

dnl and look to see if they want to disable the grid optimisation

AC_ARG_ENABLE(grid-opt,
 [  --enable-grid-opt           enable the grid optimsation within the pattern
                                matcher (default)
  --enable-grid-opt=distrust  enable the grid optimsation in non-trusting mode
  --disable-grid-opt          disable the grid optimisation])

default_level=10
default_semeai_variations=250
default_owl_node_limit=1000

AC_ARG_ENABLE(level,
  [  --enable-level=n            n = default level (up to 10 supported)])

AC_ARG_ENABLE(semeai-variations,
  [  --enable-semeai-variations=n        n = semeai variations (250 standard)])

AC_ARG_ENABLE(level,
  [  --enable-owl-node-limit=n           n = owl node limit (1000 standard)])

AC_ARG_ENABLE(dfa,
 [  --disable-dfa               use old non-dfa pattern matcher],
 [ if test ${enableval} = no; then	
     dfa_c=
   else	
     dfa_c=dfa
   fi] ,
 [ dfa_c=dfa ])

AC_ARG_ENABLE(chinese-rules,
 [  --enable-chinese-rules      use Chinese (area) counting
  --disable-chinese-rules     use Japanese counting (default)])

AC_ARG_ENABLE(experimental-semeai,
 [  --enable-experimental-semeai       use the experimental semeai module (default)
  --disable-experimental-semeai      use standard semeai module])

AC_ARG_ENABLE(experimental-owl-ext,
 [  --enable-experimental-owl-ext      use the experimental GAIN/LOSS codes
  --disable-experimental-owl-ext     use standard owl module (default)])

AC_ARG_ENABLE(experimental-connections,
 [  --enable-experimental-connections  use experimental connection analysis 
                                         (default)
  --disable-experimental-connections use standard connection analysis])

dnl expand any instances of @matcher@ in Makefile
AC_SUBST(dfa_c)

AC_PROG_CC

dnl for automake 1.4.x
AC_EXEEXT

dnl add -lm to library list since we use some
dnl math functions such as pow and fabs

AC_SEARCH_LIBS(pow,m)

AC_PROG_RANLIB

dnl required since we use SUBDIRS in Makefile.am
AC_PROG_MAKE_SET

AC_HEADER_TIME

AC_CHECK_SIZEOF(long,,[#include <stdio.h>])

dnl ---------- grid optimisation ------------

AH_TEMPLATE([GRID_OPT],
[Define as 1 to use the grid optimisation, or 2 to run it in self-test mode])

if test "$enable_grid_opt" = "distrust" ; then
  AC_DEFINE(GRID_OPT, 2)
else
  if test "$enable_grid_opt" = "no" ; then
    AC_DEFINE(GRID_OPT, 0)
  else
    AC_DEFINE(GRID_OPT, 1)
  fi
fi


dnl ------------ set default level  ----------

AH_TEMPLATE([DEFAULT_LEVEL],
[Default level (strength). Up to 10 supported])

if test "$enable_level" ; then
   AC_DEFINE_UNQUOTED(DEFAULT_LEVEL, $enable_level)
else
   AC_DEFINE_UNQUOTED(DEFAULT_LEVEL, $default_level)
fi

dnl ------------ set cache size ----------

AH_TEMPLATE([OWL_NODE_LIMIT],
[Owl Node Limit])

if test "$enable_owl_node_limit" ; then
   AC_DEFINE_UNQUOTED(OWL_NODE_LIMIT, $enable_owl_node_limit)
else
   AC_DEFINE_UNQUOTED(OWL_NODE_LIMIT, $default_owl_node_limit)
fi


dnl ------------ set semeai variations  ----------

AH_TEMPLATE([DEFAULT_SEMEAI_VARIATIONS],
[Semeai Variations. 250 default])

if test "$enable_semeai_variations" ; then
   AC_DEFINE_UNQUOTED(DEFAULT_SEMEAI_VARIATIONS, $enable_semeai_variations)
else
   AC_DEFINE_UNQUOTED(DEFAULT_SEMEAI_VARIATIONS, $default_semeai_variations)
fi

dnl ------------ dfa -------------------

AM_CONDITIONAL(DFA_ENABLED, test "$enable_dfa" != "no")

dnl FIXME: Is there a more elegant approach for this?
dnl force owl c files rebuild
rm -f \
       patterns/owl_attackpat.c \
       patterns/owl_defendpat.c \
       patterns/owl_vital_apat.c


dnl ------------ Chinese Rules -------------------

AH_TEMPLATE([CHINESE_RULES],
[Ruleset. Default Japanese])

if test "$enable_chinese_rules" = "yes" ; then
   AC_DEFINE(CHINESE_RULES, 1)
else
   AC_DEFINE(CHINESE_RULES, 0)
fi

dnl ------------ Chinese Rules -------------------

dnl ------------ Semeai -------------------

AH_TEMPLATE([EXPERIMENTAL_SEMEAI],
[Semeai module. Default standard.])

if test "$enable_experimental_semeai" = "no" ; then
   AC_DEFINE(EXPERIMENTAL_SEMEAI, 0)
else
   AC_DEFINE(EXPERIMENTAL_SEMEAI, 1)
fi

dnl ------------ Owl extensions ------------

AH_TEMPLATE([EXPERIMENTAL_OWL_EXT],
[GAIN/LOSS codes. Disabled by default.])

if test "$enable_experimental_owl_ext" = "yes" ; then
   AC_DEFINE(EXPERIMENTAL_OWL_EXT, 1)
else
   AC_DEFINE(EXPERIMENTAL_OWL_EXT, 0)
fi

dnl ------------ Connections -------------------

AH_TEMPLATE([EXPERIMENTAL_CONNECTIONS],
[Connection module. Default experimental.])

if test "$enable_experimental_connections" = "no" ; then
   AC_DEFINE(EXPERIMENTAL_CONNECTIONS, 0)
else
   AC_DEFINE(EXPERIMENTAL_CONNECTIONS, 1)
fi

dnl ------------ Connections -------------------

AH_TEMPLATE([ALTERNATE_CONNECTIONS],
[Connection module. Default standard.])

if test "$enable_alternate_connections" = "no" ; then
   AC_DEFINE(ALTERNATE_CONNECTIONS, 0)
else
   AC_DEFINE(ALTERNATE_CONNECTIONS, 1)
fi

dnl ------------ Owl Threats -------------------

AH_TEMPLATE([OWL_THREATS],
[Owl Threats. 0 standard.])

if test "$enable_owl_threats" = "yes" ; then
   AC_DEFINE(OWL_THREATS, 1)
else
   AC_DEFINE(OWL_THREATS, 0)
fi

dnl  ----------- special-case use of gcc ---------

dnl Not sure if we are supposed to be accessing this variable, but...

AC_SUBST(GCC_ONLY)
AC_SUBST(GNUGO_SOME_WARNINGS)
AC_SUBST(GNUGO_ALL_WARNINGS)
AC_SUBST(NO_WARNINGS)

dnl Please add -Wp,-lang-c89 to SOME_WARNINGS soon

NO_WARNINGS="CFLAGS=$CFLAGS"
if test $ac_cv_c_compiler_gnu = yes; then
  GCC_ONLY=''
  GGO_SOME_WARNINGS='-Wall -W -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wp,-lang-c89 -pedantic'
  GGO_ALL_WARNINGS='-Wall -W -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wp,-lang-c89 -pedantic'
  GNUGO_SOME_WARNINGS="CFLAGS=$CFLAGS $GGO_SOME_WARNINGS"
  GNUGO_ALL_WARNINGS="CFLAGS=$CFLAGS $GGO_ALL_WARNINGS"
  CFLAGS="$CFLAGS $GGO_SOME_WARNINGS"
  if test "$enable_profile" = "yes" ; then
     CFLAGS="-pg $CFLAGS"
  fi
else
  GCC_ONLY='#'
  GNUGO_SOME_WARNINGS=''
  GNUGO_ALL_WARNINGS=''
fi

dnl Now lines in Makefile.am can be prefixed @GCC_ONLY@, and
dnl we can specify either @GNUGO_SOME_WARNINGS@ or @GNUGO_ALL_WARNINGS@

dnl FIXME: please add warnings for other compilers !



#AM_GNU_GETTEXT
#AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)

dnl FIXME:
dnl autoconf 2.50 recommends AC_CONFIG_FILES and AC_OUPUT
dnl This however requires automake 1.4p2 or better

AC_OUTPUT([Makefile interface/Makefile patterns/Makefile sgf/Makefile
utils/Makefile engine/Makefile doc/Makefile regression/Makefile config.vc:config.vcin])
